// Nova TV Database Schema Extensions for Prisma

generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/@prisma/nova-tv-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model NovaTVDashboard {
  id            String   @id @default(cuid())
  name          String
  description   String?
  department    String
  createdBy     String
  templateId    String?
  configuration Json
  isActive      Boolean  @default(true)
  isPublic      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  creator       User               @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  template      NovaTVTemplate?    @relation(fields: [templateId], references: [id], onDelete: SetNull)
  devices       NovaTVDevice[]
  content       NovaTVContent[]
  analytics     NovaTVAnalytics[]
  sharedWith    NovaTVDashboardShare[]
  
  // Digital Signage Relations
  mediaFiles    NovaTVMediaFile[]
  playlists     NovaTVPlaylist[]

  @@map("nova_tv_dashboards")
  @@index([department])
  @@index([createdBy])
  @@index([isActive])
}

model NovaTVDevice {
  id                String   @id @default(cuid())
  name              String
  location          String?
  department        String?
  ipAddress         String?
  browserInfo       String?
  deviceFingerprint String   @unique
  dashboardId       String?
  lastActiveAt      DateTime?
  connectionStatus  String   @default("disconnected")
  
  // Enhanced settings similar to kiosks
  settings          Json     @default("{}")
  metadata          Json     @default("{}")
  
  // Branding and configuration (similar to kiosk model)
  logoUrl           String?
  bgUrl             String?
  brandingConfig    Json     @default("{}")
  displayConfig     Json     @default("{}")
  
  // Activation tracking  
  isActivated       Boolean  @default(false)
  activatedBy       String?
  activatedAt       DateTime?
  
  // Device status and health
  lastPingAt        DateTime?
  version           String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  dashboard         NovaTVDashboard? @relation(fields: [dashboardId], references: [id], onDelete: SetNull)
  activatedByUser   User?            @relation("TVActivatedBy", fields: [activatedBy], references: [id], onDelete: SetNull)
  analytics         NovaTVAnalytics[]
  authSessions      NovaTVAuthSession[]
  activations       NovaTVActivation[]

  @@map("nova_tv_devices")
  @@index([department])
  @@index([connectionStatus])
  @@index([dashboardId])
  @@index([isActivated])
  @@index([deviceFingerprint])
}

model NovaTVTemplate {
  id               String   @id @default(cuid())
  name             String
  description      String?
  category         String
  departmentType   String?
  templateConfig   Json
  isSystemTemplate Boolean  @default(false)
  isActive         Boolean  @default(true)
  createdBy        String?
  previewImageUrl  String?
  tags             String[] @default([])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  creator          User?             @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  dashboards       NovaTVDashboard[]

  @@map("nova_tv_templates")
  @@index([category])
  @@index([departmentType])
  @@index([isSystemTemplate])
}

model NovaTVContent {
  id           String   @id @default(cuid())
  dashboardId  String
  contentType  String   // 'widget', 'digital_signage', 'media', 'template'
  title        String?
  contentData  Json
  displayOrder Int?
  isActive     Boolean  @default(true)
  expiresAt    DateTime?
  scheduledAt  DateTime?
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Digital signage content references
  mediaFiles   NovaTVMediaFile[]
  playlistItems NovaTVPlaylistItem[]

  // Relations
  dashboard    NovaTVDashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  @@map("nova_tv_content")
  @@index([dashboardId])
  @@index([contentType])
  @@index([isActive])
  @@index([expiresAt])
}

// Digital Signage Media Management
model NovaTVMediaFile {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimetype     String
  size         Int
  fileType     String   // 'video', 'image', 'audio', 'document'
  fileFormat   String   // 'mp4', 'png', 'jpg', 'gif', 'mp3', 'wav', 'html'
  filePath     String
  url          String?
  uploadedBy   String
  contentId    String?
  dashboardId  String?
  
  // File validation and metadata
  isValidated  Boolean  @default(false)
  validatedAt  DateTime?
  validatedBy  String?
  
  // Media-specific metadata
  duration     Int?     // for videos/audio in seconds
  dimensions   Json?    // {width: number, height: number} for images/videos
  thumbnailUrl String?  // generated thumbnail for videos
  
  // Content management
  tags         String[] @default([])
  description  String?
  isActive     Boolean  @default(true)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  uploader     User              @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  content      NovaTVContent?    @relation(fields: [contentId], references: [id], onDelete: SetNull)
  dashboard    NovaTVDashboard?  @relation(fields: [dashboardId], references: [id], onDelete: SetNull)
  validator    User?             @relation("MediaValidator", fields: [validatedBy], references: [id], onDelete: SetNull)
  playlistItems NovaTVPlaylistItem[]
  
  @@map("nova_tv_media_files")
  @@index([uploadedBy])
  @@index([fileType])
  @@index([fileFormat])
  @@index([contentId])
  @@index([dashboardId])
  @@index([isValidated])
}

// Digital Signage Playlists for scheduled content
model NovaTVPlaylist {
  id           String   @id @default(cuid())
  name         String
  description  String?
  dashboardId  String
  isActive     Boolean  @default(true)
  
  // Scheduling settings
  startTime    DateTime?
  endTime      DateTime?
  repeatType   String?  // 'none', 'daily', 'weekly', 'monthly'
  repeatConfig Json     @default("{}")
  
  // Playlist settings
  shuffleMode  Boolean  @default(false)
  loopMode     Boolean  @default(true)
  duration     Int?     // total duration in seconds
  
  createdBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  dashboard    NovaTVDashboard    @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  creator      User               @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  items        NovaTVPlaylistItem[]

  @@map("nova_tv_playlists")
  @@index([dashboardId])
  @@index([createdBy])
  @@index([isActive])
}

model NovaTVPlaylistItem {
  id           String   @id @default(cuid())
  playlistId   String
  mediaFileId  String?
  contentId    String?
  displayOrder Int
  duration     Int?     // override duration in seconds
  
  // Item-specific settings
  startTime    String?  // time within media file to start (HH:MM:SS)
  endTime      String?  // time within media file to end (HH:MM:SS)
  isActive     Boolean  @default(true)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  playlist     NovaTVPlaylist   @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  mediaFile    NovaTVMediaFile? @relation(fields: [mediaFileId], references: [id], onDelete: SetNull)
  content      NovaTVContent?   @relation(fields: [contentId], references: [id], onDelete: SetNull)

  @@map("nova_tv_playlist_items")
  @@index([playlistId])
  @@index([mediaFileId])
  @@index([displayOrder])
}

model NovaTVAnalytics {
  id          String   @id @default(cuid())
  dashboardId String?
  deviceId    String?
  sessionId   String?
  eventType   String
  eventData   Json?
  userAgent   String?
  ipAddress   String?
  timestamp   DateTime @default(now())

  // Relations
  dashboard   NovaTVDashboard? @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  device      NovaTVDevice?    @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@map("nova_tv_analytics")
  @@index([dashboardId])
  @@index([deviceId])
  @@index([eventType])
  @@index([timestamp])
}

model NovaTVAuthSession {
  id           String   @id @default(cuid())
  sessionId    String   @unique
  sixDigitCode String
  deviceId     String?
  userId       String?
  isUsed       Boolean  @default(false)
  expiresAt    DateTime
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now())

  // Relations
  device       NovaTVDevice? @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("nova_tv_auth_sessions")
  @@index([sessionId])
  @@index([sixDigitCode])
  @@index([expiresAt])
}

model NovaTVActivation {
  id        String    @id @default(cuid())
  code      String
  qrCode    String
  expiresAt DateTime
  used      Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  deviceId  String?

  // Relations
  device    NovaTVDevice? @relation(fields: [deviceId], references: [id], onDelete: SetNull)

  @@map("nova_tv_activations")
  @@index([code])
  @@index([used])
  @@index([expiresAt])
}

model NovaTVDashboardShare {
  id          String   @id @default(cuid())
  dashboardId String
  userId      String
  permission  String   @default("view") // view, edit, admin
  createdAt   DateTime @default(now())

  // Relations
  dashboard   NovaTVDashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([dashboardId, userId])
  @@map("nova_tv_dashboard_shares")
}

// User model extension for Nova TV relationships
model User {
  id                   String                    @id @default(cuid())
  email                String                    @unique
  name                 String?
  role                 String                    @default("user")
  department           String?
  isActive             Boolean                   @default(true)
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt

  // Nova TV Relations
  createdDashboards    NovaTVDashboard[]
  createdTemplates     NovaTVTemplate[]
  authSessions         NovaTVAuthSession[]
  dashboardShares      NovaTVDashboardShare[]
  activatedTVs         NovaTVDevice[]            @relation("TVActivatedBy")
  
  // Digital Signage Relations
  uploadedMediaFiles   NovaTVMediaFile[]
  validatedMediaFiles  NovaTVMediaFile[]         @relation("MediaValidator")
  createdPlaylists     NovaTVPlaylist[]

  @@map("users")
}
