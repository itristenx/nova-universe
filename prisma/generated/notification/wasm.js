/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, '__esModule', { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip,
} = require('./runtime/index-browser.js');

const Prisma = {};

exports.Prisma = Prisma;
exports.$Enums = {};

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: '6.13.0',
  engine: '361e86d0ea4987e9f53a565309b3eed797a6bcbd',
};

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.validator = Public.validator;

/**
 * Extensions
 */
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull,
};

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
});

exports.Prisma.NotificationEventScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  module: 'module',
  eventType: 'eventType',
  priority: 'priority',
  title: 'title',
  message: 'message',
  details: 'details',
  recipientRoles: 'recipientRoles',
  recipientUsers: 'recipientUsers',
  tenantId: 'tenantId',
  actions: 'actions',
  metadata: 'metadata',
  status: 'status',
  scheduledFor: 'scheduledFor',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  processedAt: 'processedAt',
};

exports.Prisma.NotificationPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  module: 'module',
  eventType: 'eventType',
  channels: 'channels',
  priority: 'priority',
  digestEnabled: 'digestEnabled',
  digestFrequency: 'digestFrequency',
  dndEnabled: 'dndEnabled',
  dndStartTime: 'dndStartTime',
  dndEndTime: 'dndEndTime',
  dndDays: 'dndDays',
  aiSummaryEnabled: 'aiSummaryEnabled',
  aiGroupingEnabled: 'aiGroupingEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  userId: 'userId',
  channel: 'channel',
  title: 'title',
  message: 'message',
  details: 'details',
  actions: 'actions',
  status: 'status',
  priority: 'priority',
  scheduledFor: 'scheduledFor',
  deliveredAt: 'deliveredAt',
  readAt: 'readAt',
  clickedAt: 'clickedAt',
  dismissedAt: 'dismissedAt',
  retryCount: 'retryCount',
  maxRetries: 'maxRetries',
  nextRetry: 'nextRetry',
  aiSummary: 'aiSummary',
  groupId: 'groupId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.NotificationDeliveryScalarFieldEnum = {
  id: 'id',
  notificationId: 'notificationId',
  eventId: 'eventId',
  userId: 'userId',
  channel: 'channel',
  provider: 'provider',
  providerConfig: 'providerConfig',
  status: 'status',
  deliveredAt: 'deliveredAt',
  failedAt: 'failedAt',
  errorMessage: 'errorMessage',
  errorCode: 'errorCode',
  providerResponse: 'providerResponse',
  messageId: 'messageId',
  responseTime: 'responseTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.NotificationTemplateScalarFieldEnum = {
  id: 'id',
  module: 'module',
  eventType: 'eventType',
  channel: 'channel',
  name: 'name',
  description: 'description',
  titleTemplate: 'titleTemplate',
  messageTemplate: 'messageTemplate',
  detailsTemplate: 'detailsTemplate',
  isDefault: 'isDefault',
  isActive: 'isActive',
  version: 'version',
  locale: 'locale',
  variables: 'variables',
  actions: 'actions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
};

exports.Prisma.NotificationProviderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  config: 'config',
  credentials: 'credentials',
  isActive: 'isActive',
  isDefault: 'isDefault',
  priority: 'priority',
  rateLimitPerHour: 'rateLimitPerHour',
  rateLimitPerDay: 'rateLimitPerDay',
  lastHealthCheck: 'lastHealthCheck',
  healthStatus: 'healthStatus',
  errorCount: 'errorCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
};

exports.Prisma.HelixUserNotificationProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  globalEnabled: 'globalEnabled',
  defaultChannels: 'defaultChannels',
  timezone: 'timezone',
  digestEnabled: 'digestEnabled',
  digestFrequency: 'digestFrequency',
  digestTime: 'digestTime',
  dndEnabled: 'dndEnabled',
  dndStartTime: 'dndStartTime',
  dndEndTime: 'dndEndTime',
  dndDays: 'dndDays',
  goalertEnabled: 'goalertEnabled',
  goalertSchedules: 'goalertSchedules',
  goalertPolicies: 'goalertPolicies',
  pagerEnabled: 'pagerEnabled',
  synthEnabled: 'synthEnabled',
  aiDigestEnabled: 'aiDigestEnabled',
  aiGroupingLevel: 'aiGroupingLevel',
  muteRepetitive: 'muteRepetitive',
  sentinelEnabled: 'sentinelEnabled',
  securityEvents: 'securityEvents',
  complianceEvents: 'complianceEvents',
  deviceTokens: 'deviceTokens',
  pushEnabled: 'pushEnabled',
  phoneNumber: 'phoneNumber',
  slackUserId: 'slackUserId',
  teamsUserId: 'teamsUserId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.NotificationQueueScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  deliveryId: 'deliveryId',
  priority: 'priority',
  scheduledFor: 'scheduledFor',
  attempts: 'attempts',
  maxAttempts: 'maxAttempts',
  lastAttemptAt: 'lastAttemptAt',
  nextAttemptAt: 'nextAttemptAt',
  status: 'status',
  error: 'error',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.NotificationRoleDefaultScalarFieldEnum = {
  id: 'id',
  roleName: 'roleName',
  module: 'module',
  eventType: 'eventType',
  channels: 'channels',
  enabled: 'enabled',
  priority: 'priority',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.NotificationAuditLogScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  action: 'action',
  userId: 'userId',
  metadata: 'metadata',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  timestamp: 'timestamp',
};

exports.Prisma.RoleNotificationDefaultsScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  module: 'module',
  eventType: 'eventType',
  channels: 'channels',
  priority: 'priority',
  digestEnabled: 'digestEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
};

exports.Prisma.NotificationAnalyticsScalarFieldEnum = {
  id: 'id',
  date: 'date',
  hour: 'hour',
  module: 'module',
  eventType: 'eventType',
  channel: 'channel',
  priority: 'priority',
  userId: 'userId',
  tenantId: 'tenantId',
  eventsCreated: 'eventsCreated',
  notificationsSent: 'notificationsSent',
  delivered: 'delivered',
  failed: 'failed',
  opened: 'opened',
  clicked: 'clicked',
  dismissed: 'dismissed',
  avgResponseTime: 'avgResponseTime',
  maxResponseTime: 'maxResponseTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc',
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull,
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive',
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull,
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last',
};
exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  CRITICAL: 'CRITICAL',
  HIGH: 'HIGH',
  NORMAL: 'NORMAL',
  LOW: 'LOW',
};

exports.EventStatus = exports.$Enums.EventStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  SCHEDULED: 'SCHEDULED',
};

exports.DigestFrequency = exports.$Enums.DigestFrequency = {
  IMMEDIATELY: 'IMMEDIATELY',
  HOURLY: 'HOURLY',
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
};

exports.NotificationChannel = exports.$Enums.NotificationChannel = {
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  PUSH: 'PUSH',
  IN_APP: 'IN_APP',
  SLACK: 'SLACK',
  TEAMS: 'TEAMS',
  DISCORD: 'DISCORD',
  WEBHOOK: 'WEBHOOK',
  PHONE_CALL: 'PHONE_CALL',
  PAGER: 'PAGER',
};

exports.NotificationStatus = exports.$Enums.NotificationStatus = {
  PENDING: 'PENDING',
  SCHEDULED: 'SCHEDULED',
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  READ: 'READ',
  CLICKED: 'CLICKED',
  DISMISSED: 'DISMISSED',
  FAILED: 'FAILED',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED',
};

exports.DeliveryStatus = exports.$Enums.DeliveryStatus = {
  PENDING: 'PENDING',
  SENDING: 'SENDING',
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  FAILED: 'FAILED',
  BOUNCED: 'BOUNCED',
  REJECTED: 'REJECTED',
};

exports.ProviderHealth = exports.$Enums.ProviderHealth = {
  HEALTHY: 'HEALTHY',
  DEGRADED: 'DEGRADED',
  UNHEALTHY: 'UNHEALTHY',
  UNKNOWN: 'UNKNOWN',
};

exports.AiGroupingLevel = exports.$Enums.AiGroupingLevel = {
  DISABLED: 'DISABLED',
  EVENT_TYPE: 'EVENT_TYPE',
  MODULE: 'MODULE',
  PRIORITY: 'PRIORITY',
  GLOBAL: 'GLOBAL',
};

exports.Prisma.ModelName = {
  NotificationEvent: 'NotificationEvent',
  NotificationPreference: 'NotificationPreference',
  Notification: 'Notification',
  NotificationDelivery: 'NotificationDelivery',
  NotificationTemplate: 'NotificationTemplate',
  NotificationProvider: 'NotificationProvider',
  HelixUserNotificationProfile: 'HelixUserNotificationProfile',
  NotificationQueue: 'NotificationQueue',
  NotificationRoleDefault: 'NotificationRoleDefault',
  NotificationAuditLog: 'NotificationAuditLog',
  RoleNotificationDefaults: 'RoleNotificationDefaults',
  NotificationAnalytics: 'NotificationAnalytics',
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message;
        const runtime = getRuntime();
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message =
            'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' +
            runtime.prettyName +
            '`).';
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`;

        throw new Error(message);
      },
    });
  }
}

exports.PrismaClient = PrismaClient;

Object.assign(exports, Prisma);
