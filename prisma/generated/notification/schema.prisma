// Nova Universal Notification Platform (UNP) Schema
// Industry-standard notification system with RBAC, multi-channel delivery,
// and AI-enhanced features for unified notifications across all Nova modules

datasource notification_db {
  provider = "postgresql"
  url      = env("NOTIFICATION_DATABASE_URL")
}

generator notificationClient {
  provider = "prisma-client-js"
  output   = "../generated/notification"
}

// ============================================================================
// CORE NOTIFICATION MODELS
// ============================================================================

// Notification Event - Core event that triggers notifications
model NotificationEvent {
  id        String               @id @default(uuid())
  eventId   String               @unique @map("event_id") // For idempotency
  module    String // pulse.tickets, sentinel, goalert, etc.
  eventType String               @map("event_type") // sla_breach, system_alert, etc.
  priority  NotificationPriority @default(NORMAL)
  title     String
  message   String
  details   String? // Rich text/HTML details

  // Targeting
  recipientRoles String[] @map("recipient_roles") // Array of role names
  recipientUsers String[] @map("recipient_users") // Array of user IDs
  tenantId       String?  @map("tenant_id")

  // Actions and metadata
  actions  Json? // Array of action buttons
  metadata Json? // Event-specific metadata

  // Lifecycle
  status       EventStatus @default(PENDING)
  scheduledFor DateTime?   @map("scheduled_for") // For scheduled notifications
  expiresAt    DateTime?   @map("expires_at")

  // Audit
  createdAt   DateTime  @default(now()) @map("created_at")
  createdBy   String?   @map("created_by")
  processedAt DateTime? @map("processed_at")

  // Relationships
  notifications Notification[]
  deliveries    NotificationDelivery[]
  queue         NotificationQueue[]
  auditLogs     NotificationAuditLog[]

  @@index([module, eventType])
  @@index([status, scheduledFor])
  @@index([tenantId, createdAt])
  @@map("notification_events")
}

// User Notification Preferences
model NotificationPreference {
  id        String @id @default(uuid())
  userId    String @map("user_id")
  module    String // pulse, sentinel, goalert, etc.
  eventType String @map("event_type")

  // Channel preferences
  channels NotificationChannel[] // Enabled channels for this event type
  priority NotificationPriority  @default(NORMAL)

  // Digest settings
  digestEnabled   Boolean          @default(false) @map("digest_enabled")
  digestFrequency DigestFrequency? @map("digest_frequency")

  // Do Not Disturb
  dndEnabled   Boolean  @default(false) @map("dnd_enabled")
  dndStartTime String?  @map("dnd_start_time") // "22:00"
  dndEndTime   String?  @map("dnd_end_time") // "06:00"
  dndDays      String[] @default([]) @map("dnd_days") // ["monday", "tuesday"]

  // AI preferences
  aiSummaryEnabled  Boolean @default(true) @map("ai_summary_enabled")
  aiGroupingEnabled Boolean @default(true) @map("ai_grouping_enabled")

  // Audit
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  helixProfile HelixUserNotificationProfile? @relation(fields: [userId], references: [userId])

  @@unique([userId, module, eventType])
  @@index([userId])
  @@index([module, eventType])
  @@map("notification_preferences")
}

// Individual notification instance
model Notification {
  id      String              @id @default(uuid())
  eventId String              @map("event_id")
  userId  String              @map("user_id")
  channel NotificationChannel

  // Content (can be personalized per user)
  title   String
  message String
  details String?
  actions Json? // Personalized actions

  // Delivery
  status   NotificationStatus   @default(PENDING)
  priority NotificationPriority @default(NORMAL)

  // Timing
  scheduledFor DateTime? @map("scheduled_for")
  deliveredAt  DateTime? @map("delivered_at")
  readAt       DateTime? @map("read_at")
  clickedAt    DateTime? @map("clicked_at")
  dismissedAt  DateTime? @map("dismissed_at")

  // Retry logic
  retryCount Int       @default(0) @map("retry_count")
  maxRetries Int       @default(3) @map("max_retries")
  nextRetry  DateTime? @map("next_retry")

  // AI enhancements
  aiSummary String? @map("ai_summary")
  groupId   String? @map("group_id") // For AI grouping

  // Audit
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  event      NotificationEvent      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  deliveries NotificationDelivery[]
  queue      NotificationQueue[]

  @@index([userId, status])
  @@index([channel, status])
  @@index([scheduledFor])
  @@index([groupId])
  @@map("notifications")
}

// Notification delivery attempts and results
model NotificationDelivery {
  id             String              @id @default(uuid())
  notificationId String              @map("notification_id")
  eventId        String              @map("event_id")
  userId         String              @map("user_id")
  channel        NotificationChannel

  // Delivery details
  provider       String? // smtp, fcm, apns, slack, etc.
  providerConfig Json?   @map("provider_config")

  // Status and results
  status       DeliveryStatus @default(PENDING)
  deliveredAt  DateTime?      @map("delivered_at")
  failedAt     DateTime?      @map("failed_at")
  errorMessage String?        @map("error_message")
  errorCode    String?        @map("error_code")

  // Provider response
  providerResponse Json?   @map("provider_response")
  messageId        String? @map("message_id") // Provider message ID

  // Metrics
  responseTime Int? @map("response_time") // milliseconds

  // Audit
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  notification Notification      @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  event        NotificationEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([userId, channel])
  @@index([status, createdAt])
  @@index([provider])
  @@map("notification_deliveries")
}

// Notification templates for different modules and event types
model NotificationTemplate {
  id        String              @id @default(uuid())
  module    String
  eventType String              @map("event_type")
  channel   NotificationChannel

  // Template content
  name            String
  description     String?
  titleTemplate   String  @map("title_template")
  messageTemplate String  @map("message_template")
  detailsTemplate String? @map("details_template")

  // Template settings
  isDefault Boolean @default(false) @map("is_default")
  isActive  Boolean @default(true) @map("is_active")
  version   Int     @default(1)

  // Localization
  locale String @default("en")

  // Variables and actions
  variables Json? // Available template variables
  actions   Json? // Default actions for this template

  // Audit
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy String?  @map("created_by")

  @@unique([module, eventType, channel, locale])
  @@index([module, eventType])
  @@index([isDefault, isActive])
  @@map("notification_templates")
}

// Notification providers configuration
model NotificationProvider {
  id   String              @id @default(uuid())
  name String
  type NotificationChannel

  // Provider configuration
  config      Json // Provider-specific configuration
  credentials Json? // Encrypted credentials

  // Status and settings
  isActive  Boolean @default(true) @map("is_active")
  isDefault Boolean @default(false) @map("is_default")
  priority  Int     @default(1) // Higher number = higher priority

  // Rate limiting
  rateLimitPerHour Int? @map("rate_limit_per_hour")
  rateLimitPerDay  Int? @map("rate_limit_per_day")

  // Health monitoring
  lastHealthCheck DateTime?      @map("last_health_check")
  healthStatus    ProviderHealth @default(UNKNOWN) @map("health_status")
  errorCount      Int            @default(0) @map("error_count")

  // Audit
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy String?  @map("created_by")

  @@index([type, isActive])
  @@index([healthStatus])
  @@map("notification_providers")
}

// ============================================================================
// ENHANCED HELIX USER EXTENSIONS
// ============================================================================

// Extended user notification preferences for Helix integration
model HelixUserNotificationProfile {
  id     String @id @default(uuid())
  userId String @unique @map("user_id")

  // Global notification settings
  globalEnabled   Boolean               @default(true) @map("global_enabled")
  defaultChannels NotificationChannel[] @default([EMAIL, IN_APP]) @map("default_channels")
  timezone        String                @default("UTC")

  // Digest preferences
  digestEnabled   Boolean         @default(false) @map("digest_enabled")
  digestFrequency DigestFrequency @default(DAILY) @map("digest_frequency")
  digestTime      String          @default("09:00") @map("digest_time")

  // Do Not Disturb
  dndEnabled   Boolean  @default(false) @map("dnd_enabled")
  dndStartTime String?  @map("dnd_start_time")
  dndEndTime   String?  @map("dnd_end_time")
  dndDays      String[] @default([]) @map("dnd_days")

  // GoAlert Integration
  goalertEnabled   Boolean  @default(false) @map("goalert_enabled")
  goalertSchedules String[] @default([]) @map("goalert_schedules")
  goalertPolicies  String[] @default([]) @map("goalert_policies")
  pagerEnabled     Boolean  @default(false) @map("pager_enabled")

  // Synth (Cosmo) AI Preferences
  synthEnabled    Boolean         @default(true) @map("synth_enabled")
  aiDigestEnabled Boolean         @default(true) @map("ai_digest_enabled")
  aiGroupingLevel AiGroupingLevel @default(MODULE) @map("ai_grouping_level")
  muteRepetitive  Boolean         @default(true) @map("mute_repetitive")

  // Sentinel Integration
  sentinelEnabled  Boolean  @default(true) @map("sentinel_enabled")
  securityEvents   String[] @default([]) @map("security_events")
  complianceEvents Boolean  @default(false) @map("compliance_events")

  // Mobile and Device settings
  deviceTokens Json?   @map("device_tokens") // FCM/APNs tokens
  pushEnabled  Boolean @default(true) @map("push_enabled")

  // Contact information
  phoneNumber String? @map("phone_number")
  slackUserId String? @map("slack_user_id")
  teamsUserId String? @map("teams_user_id")

  // Audit
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  preferences NotificationPreference[]

  @@index([userId])
  @@map("helix_user_notification_profiles")
}

// Notification processing queue for background job management
model NotificationQueue {
  id            String               @id @default(uuid())
  eventId       String               @map("event_id")
  deliveryId    String               @map("delivery_id")
  priority      NotificationPriority @default(NORMAL)
  scheduledFor  DateTime             @default(now()) @map("scheduled_for")
  attempts      Int                  @default(0)
  maxAttempts   Int                  @default(3) @map("max_attempts")
  lastAttemptAt DateTime?            @map("last_attempt_at")
  nextAttemptAt DateTime?            @map("next_attempt_at")
  status        String               @default("PENDING")
  error         String?
  metadata      Json?
  createdAt     DateTime             @default(now()) @map("created_at")
  updatedAt     DateTime             @updatedAt @map("updated_at")

  // Relationships
  event    NotificationEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  delivery Notification      @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([deliveryId])
  @@index([scheduledFor])
  @@index([status])
  @@index([priority])
  @@index([nextAttemptAt])
  @@map("notification_queue")
}

// Role-based notification defaults
model NotificationRoleDefault {
  id        String                @id @default(uuid())
  roleName  String                @map("role_name")
  module    String
  eventType String                @map("event_type")
  channels  NotificationChannel[]
  enabled   Boolean               @default(true)
  priority  NotificationPriority?
  metadata  Json?
  createdAt DateTime              @default(now()) @map("created_at")
  updatedAt DateTime              @updatedAt @map("updated_at")

  @@unique([roleName, module, eventType])
  @@index([roleName])
  @@index([module, eventType])
  @@map("notification_role_defaults")
}

// Audit log for notification operations
model NotificationAuditLog {
  id        String   @id @default(uuid())
  eventId   String   @map("event_id")
  action    String // CREATED, SENT, READ, CANCELLED, etc.
  userId    String?  @map("user_id")
  metadata  Json?
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  timestamp DateTime @default(now())

  // Relationships
  event NotificationEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([userId])
  @@index([timestamp])
  @@map("notification_audit_log")
}

// Role-based notification defaults
model RoleNotificationDefaults {
  id        String @id @default(uuid())
  roleId    String @map("role_id")
  module    String
  eventType String @map("event_type")

  // Default settings for this role
  channels      NotificationChannel[]
  priority      NotificationPriority  @default(NORMAL)
  digestEnabled Boolean               @default(false) @map("digest_enabled")

  // Audit
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy String?  @map("created_by")

  @@unique([roleId, module, eventType])
  @@index([roleId])
  @@index([module, eventType])
  @@map("role_notification_defaults")
}

// ============================================================================
// ANALYTICS AND REPORTING
// ============================================================================

// Notification analytics for insights and optimization
model NotificationAnalytics {
  id   String   @id @default(uuid())
  date DateTime @map("date")
  hour Int? // For hourly analytics

  // Dimensions
  module    String?
  eventType String?               @map("event_type")
  channel   NotificationChannel?
  priority  NotificationPriority?
  userId    String?               @map("user_id")
  tenantId  String?               @map("tenant_id")

  // Metrics
  eventsCreated     Int @default(0) @map("events_created")
  notificationsSent Int @default(0) @map("notifications_sent")
  delivered         Int @default(0)
  failed            Int @default(0)
  opened            Int @default(0)
  clicked           Int @default(0)
  dismissed         Int @default(0)

  // Response times (in milliseconds)
  avgResponseTime Float? @map("avg_response_time")
  maxResponseTime Int?   @map("max_response_time")

  // Audit
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([date, hour, module, eventType, channel, userId])
  @@index([date, module])
  @@index([userId, date])
  @@map("notification_analytics")
}

// ============================================================================
// ENUMS
// ============================================================================

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
  IN_APP
  SLACK
  TEAMS
  DISCORD
  WEBHOOK
  PHONE_CALL
  PAGER

  @@map("notification_channel")
}

enum NotificationPriority {
  CRITICAL
  HIGH
  NORMAL
  LOW

  @@map("notification_priority")
}

enum NotificationStatus {
  PENDING
  SCHEDULED
  SENT
  DELIVERED
  READ
  CLICKED
  DISMISSED
  FAILED
  EXPIRED
  CANCELLED

  @@map("notification_status")
}

enum EventStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  SCHEDULED

  @@map("event_status")
}

enum DeliveryStatus {
  PENDING
  SENDING
  SENT
  DELIVERED
  FAILED
  BOUNCED
  REJECTED

  @@map("delivery_status")
}

enum DigestFrequency {
  IMMEDIATELY
  HOURLY
  DAILY
  WEEKLY

  @@map("digest_frequency")
}

enum AiGroupingLevel {
  DISABLED
  EVENT_TYPE
  MODULE
  PRIORITY
  GLOBAL

  @@map("ai_grouping_level")
}

enum ProviderHealth {
  HEALTHY
  DEGRADED
  UNHEALTHY
  UNKNOWN

  @@map("provider_health")
}
