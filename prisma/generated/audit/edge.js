/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, '__esModule', { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/edge.js');

const Prisma = {};

exports.Prisma = Prisma;
exports.$Enums = {};

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: '6.13.0',
  engine: '361e86d0ea4987e9f53a565309b3eed797a6bcbd',
};

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError;
Prisma.PrismaClientInitializationError = PrismaClientInitializationError;
Prisma.PrismaClientValidationError = PrismaClientValidationError;
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag;
Prisma.empty = empty;
Prisma.join = join;
Prisma.raw = raw;
Prisma.validator = Public.validator;

/**
 * Extensions
 */
Prisma.getExtensionContext = Extensions.getExtensionContext;
Prisma.defineExtension = Extensions.defineExtension;

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull,
};

/**
 * Enums
 */
undefined;

exports.Prisma.ModelName = {};
/**
 * Create the Client
 */
const config = {
  generator: {
    name: 'auditClient',
    provider: {
      fromEnvVar: null,
      value: 'prisma-client-js',
    },
    output: {
      value: '/workspace/prisma/generated/audit',
      fromEnvVar: null,
    },
    config: {
      engineType: 'library',
    },
    binaryTargets: [
      {
        fromEnvVar: null,
        value: 'debian-openssl-3.0.x',
        native: true,
      },
      {
        fromEnvVar: null,
        value: 'debian-openssl-3.0.x',
      },
    ],
    previewFeatures: [],
    sourceFilePath: '/workspace/prisma/audit/schema.prisma',
    isCustomOutput: true,
  },
  relativeEnvPaths: {
    rootEnvPath: null,
  },
  relativePath: '../../audit',
  clientVersion: '6.13.0',
  engineVersion: '361e86d0ea4987e9f53a565309b3eed797a6bcbd',
  datasourceNames: ['audit_db'],
  activeProvider: 'mongodb',
  postinstall: false,
  inlineDatasources: {
    audit_db: {
      url: {
        fromEnvVar: 'AUDIT_DATABASE_URL',
        value: null,
      },
    },
  },
  inlineSchema:
    'datasource audit_db {\n  provider = "mongodb"\n  url      = env("AUDIT_DATABASE_URL")\n}\n\ngenerator auditClient {\n  provider      = "prisma-client-js"\n  output        = "../generated/audit"\n  binaryTargets = ["native", "debian-openssl-3.0.x"]\n}\n',
  inlineSchemaHash: '6c7b75b0c01374fe8bed48e7a5289af428d937ec017342d89af36bcdffed2667',
  copyEngine: true,
};
config.dirname = '/';

config.runtimeDataModel = JSON.parse('{"models":{},"enums":{},"types":{}}');
defineDmmfProperty(exports.Prisma, config.runtimeDataModel);
config.engineWasm = undefined;
config.compilerWasm = undefined;

config.injectableEdgeEnv = () => ({
  parsed: {
    AUDIT_DATABASE_URL:
      (typeof globalThis !== 'undefined' && globalThis['AUDIT_DATABASE_URL']) ||
      (typeof process !== 'undefined' && process.env && process.env.AUDIT_DATABASE_URL) ||
      undefined,
  },
});

if (
  (typeof globalThis !== 'undefined' && globalThis['DEBUG']) ||
  (typeof process !== 'undefined' && process.env && process.env.DEBUG) ||
  undefined
) {
  Debug.enable(
    (typeof globalThis !== 'undefined' && globalThis['DEBUG']) ||
      (typeof process !== 'undefined' && process.env && process.env.DEBUG) ||
      undefined,
  );
}

const PrismaClient = getPrismaClient(config);
exports.PrismaClient = PrismaClient;
Object.assign(exports, Prisma);
