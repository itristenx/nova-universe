
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  passwordHash: 'passwordHash',
  disabled: 'disabled',
  isDefault: 'isDefault',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret',
  twoFactorBackupCodes: 'twoFactorBackupCodes',
  twoFactorVerified: 'twoFactorVerified',
  samlNameId: 'samlNameId',
  samlSessionIndex: 'samlSessionIndex',
  scimExternalId: 'scimExternalId',
  department: 'department',
  lastSamlLogin: 'lastSamlLogin',
  isVip: 'isVip',
  vipLevel: 'vipLevel',
  vipSlaOverride: 'vipSlaOverride'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  resource: 'resource',
  action: 'action',
  createdAt: 'createdAt'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  userId: 'userId',
  roleId: 'roleId',
  assignedAt: 'assignedAt'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  roleId: 'roleId',
  permissionId: 'permissionId',
  assignedAt: 'assignedAt'
};

exports.Prisma.PasskeyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  credentialId: 'credentialId',
  publicKey: 'publicKey',
  counter: 'counter',
  transports: 'transports',
  deviceType: 'deviceType',
  backedUp: 'backedUp',
  createdAt: 'createdAt',
  lastUsed: 'lastUsed'
};

exports.Prisma.LogScalarFieldEnum = {
  id: 'id',
  ticketId: 'ticketId',
  name: 'name',
  email: 'email',
  title: 'title',
  system: 'system',
  urgency: 'urgency',
  timestamp: 'timestamp',
  emailStatus: 'emailStatus',
  userId: 'userId'
};

exports.Prisma.ConfigScalarFieldEnum = {
  key: 'key',
  value: 'value',
  valueType: 'valueType',
  description: 'description',
  isPublic: 'isPublic',
  category: 'category',
  subcategory: 'subcategory',
  isUIEditable: 'isUIEditable',
  isRequired: 'isRequired',
  defaultValue: 'defaultValue',
  validationRules: 'validationRules',
  displayOrder: 'displayOrder',
  helpText: 'helpText',
  isAdvanced: 'isAdvanced',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ConfigHistoryScalarFieldEnum = {
  id: 'id',
  configKey: 'configKey',
  oldValue: 'oldValue',
  newValue: 'newValue',
  changedBy: 'changedBy',
  changeReason: 'changeReason',
  createdAt: 'createdAt'
};

exports.Prisma.ConfigTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  template: 'template',
  isDefault: 'isDefault',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KioskScalarFieldEnum = {
  id: 'id',
  lastSeen: 'lastSeen',
  version: 'version',
  active: 'active',
  logoUrl: 'logoUrl',
  bgUrl: 'bgUrl',
  statusEnabled: 'statusEnabled',
  currentStatus: 'currentStatus',
  openMsg: 'openMsg',
  closedMsg: 'closedMsg',
  errorMsg: 'errorMsg',
  meetingMsg: 'meetingMsg',
  brbMsg: 'brbMsg',
  lunchMsg: 'lunchMsg',
  unavailableMsg: 'unavailableMsg',
  schedule: 'schedule',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  id: 'id',
  name: 'name',
  message: 'message',
  timestamp: 'timestamp',
  userId: 'userId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  message: 'message',
  level: 'level',
  active: 'active',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DirectoryIntegrationScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  settings: 'settings',
  enabled: 'enabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AssetScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  filename: 'filename',
  url: 'url',
  sizeBytes: 'sizeBytes',
  mimeType: 'mimeType',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.KioskActivationScalarFieldEnum = {
  id: 'id',
  code: 'code',
  qrCode: 'qrCode',
  expiresAt: 'expiresAt',
  used: 'used',
  usedAt: 'usedAt',
  createdAt: 'createdAt',
  kioskId: 'kioskId'
};

exports.Prisma.SsoConfigurationScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  enabled: 'enabled',
  configuration: 'configuration',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminPinScalarFieldEnum = {
  id: 'id',
  globalPin: 'globalPin',
  kioskPins: 'kioskPins',
  updatedAt: 'updatedAt'
};

exports.Prisma.KbArticleScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  title: 'title',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authorId: 'authorId',
  currentVersionId: 'currentVersionId',
  isPublished: 'isPublished',
  tags: 'tags'
};

exports.Prisma.KbArticleVersionScalarFieldEnum = {
  id: 'id',
  articleId: 'articleId',
  content: 'content',
  summary: 'summary',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authorId: 'authorId',
  version: 'version',
  isApproved: 'isApproved'
};

exports.Prisma.KbArticleCommentScalarFieldEnum = {
  id: 'id',
  articleId: 'articleId',
  userId: 'userId',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.SupportTicketScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  assigneeId: 'assigneeId',
  vipPriorityScore: 'vipPriorityScore',
  vipTriggerSource: 'vipTriggerSource'
};

exports.Prisma.InventoryAssetScalarFieldEnum = {
  id: 'id',
  assetTag: 'assetTag',
  typeId: 'typeId',
  serialNumber: 'serialNumber',
  model: 'model',
  vendorId: 'vendorId',
  purchaseDate: 'purchaseDate',
  warrantyExpiry: 'warrantyExpiry',
  assignedToUserId: 'assignedToUserId',
  assignedToOrgId: 'assignedToOrgId',
  assignedToCustomerId: 'assignedToCustomerId',
  department: 'department',
  status: 'status',
  locationId: 'locationId',
  kioskId: 'kioskId',
  customFields: 'customFields',
  notes: 'notes',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  serialNumberEnc: 'serialNumberEnc',
  warrantyInfoEnc: 'warrantyInfoEnc',
  purchaseInfoEnc: 'purchaseInfoEnc',
  maintenanceNotesEnc: 'maintenanceNotesEnc',
  warrantyAlertDays: 'warrantyAlertDays',
  warrantyAlertEnabled: 'warrantyAlertEnabled',
  lastWarrantyAlertSent: 'lastWarrantyAlertSent',
  importBatchId: 'importBatchId',
  importSource: 'importSource',
  importValidated: 'importValidated',
  validationErrors: 'validationErrors'
};

exports.Prisma.AssetStatusLogScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  previousStatus: 'previousStatus',
  newStatus: 'newStatus',
  changedByUserId: 'changedByUserId',
  notes: 'notes',
  timestamp: 'timestamp'
};

exports.Prisma.AssetAssignmentScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  userId: 'userId',
  orgId: 'orgId',
  customerId: 'customerId',
  assignedBy: 'assignedBy',
  assignedDate: 'assignedDate',
  expectedReturn: 'expectedReturn',
  returnDate: 'returnDate',
  managerId: 'managerId'
};

exports.Prisma.AssetTicketHistoryScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  ticketId: 'ticketId',
  relationshipType: 'relationshipType',
  createdAt: 'createdAt',
  endedAt: 'endedAt',
  createdBy: 'createdBy',
  notes: 'notes'
};

exports.Prisma.AssetWarrantyAlertScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  alertType: 'alertType',
  alertDate: 'alertDate',
  expiryDate: 'expiryDate',
  daysRemaining: 'daysRemaining',
  notificationSent: 'notificationSent',
  notificationSentAt: 'notificationSentAt',
  dismissed: 'dismissed',
  dismissedBy: 'dismissedBy',
  dismissedAt: 'dismissedAt'
};

exports.Prisma.AssetImportBatchScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  importedBy: 'importedBy',
  importDate: 'importDate',
  totalRecords: 'totalRecords',
  successfulRecords: 'successfulRecords',
  failedRecords: 'failedRecords',
  validationStatus: 'validationStatus',
  validationErrors: 'validationErrors',
  rollbackDate: 'rollbackDate',
  rollbackBy: 'rollbackBy'
};

exports.Prisma.AssetValidationLogScalarFieldEnum = {
  id: 'id',
  batchId: 'batchId',
  assetId: 'assetId',
  rowNumber: 'rowNumber',
  validationLevel: 'validationLevel',
  fieldName: 'fieldName',
  message: 'message',
  rawData: 'rawData',
  createdAt: 'createdAt'
};

exports.Prisma.KioskAssetRegistryScalarFieldEnum = {
  id: 'id',
  kioskId: 'kioskId',
  assetId: 'assetId',
  registrationDate: 'registrationDate',
  lastCheckIn: 'lastCheckIn',
  status: 'status',
  helixSyncStatus: 'helixSyncStatus',
  helixLastSync: 'helixLastSync',
  helixErrorMessage: 'helixErrorMessage',
  encryptedMetadata: 'encryptedMetadata',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.HelixSyncFailureScalarFieldEnum = {
  id: 'id',
  kioskId: 'kioskId',
  assetId: 'assetId',
  errorMessage: 'errorMessage',
  metadata: 'metadata',
  retryCount: 'retryCount',
  nextRetryAt: 'nextRetryAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KioskOrganizationAssignmentScalarFieldEnum = {
  id: 'id',
  kioskId: 'kioskId',
  organizationId: 'organizationId',
  department: 'department',
  floor: 'floor',
  room: 'room',
  building: 'building',
  assignedBy: 'assignedBy',
  assignmentMetadata: 'assignmentMetadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KioskMetadataLogScalarFieldEnum = {
  id: 'id',
  kioskId: 'kioskId',
  metadataType: 'metadataType',
  encryptedMetadata: 'encryptedMetadata',
  collectionTimestamp: 'collectionTimestamp'
};

exports.Prisma.XpEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  reason: 'reason',
  createdAt: 'createdAt'
};

exports.Prisma.LeaderboardScalarFieldEnum = {
  userId: 'userId',
  xpTotal: 'xpTotal'
};

exports.Prisma.ScimMappingScalarFieldEnum = {
  id: 'id',
  externalId: 'externalId',
  userId: 'userId',
  provider: 'provider',
  syncTime: 'syncTime'
};

exports.Prisma.ScimLogScalarFieldEnum = {
  id: 'id',
  operation: 'operation',
  entityType: 'entityType',
  entityId: 'entityId',
  statusCode: 'statusCode',
  message: 'message',
  requestBody: 'requestBody',
  responseBody: 'responseBody',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  duration: 'duration',
  createdAt: 'createdAt'
};

exports.Prisma.MailroomPackageScalarFieldEnum = {
  id: 'id',
  trackingNumber: 'trackingNumber',
  carrier: 'carrier',
  sender: 'sender',
  recipientId: 'recipientId',
  department: 'department',
  packageType: 'packageType',
  status: 'status',
  assignedLocation: 'assignedLocation',
  linkedTicketId: 'linkedTicketId',
  linkedAssetId: 'linkedAssetId',
  flags: 'flags',
  intakePhotoUrl: 'intakePhotoUrl',
  deliveryPhotoUrl: 'deliveryPhotoUrl',
  signatureUrl: 'signatureUrl',
  intakeLocation: 'intakeLocation',
  deliveryLocation: 'deliveryLocation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeliveryEventScalarFieldEnum = {
  id: 'id',
  packageId: 'packageId',
  eventType: 'eventType',
  performedBy: 'performedBy',
  location: 'location',
  timestamp: 'timestamp',
  photoUrl: 'photoUrl',
  signatureBlob: 'signatureBlob'
};

exports.Prisma.ProxyAuthorizationScalarFieldEnum = {
  id: 'id',
  recipientId: 'recipientId',
  proxyId: 'proxyId',
  packageId: 'packageId',
  expiration: 'expiration',
  status: 'status'
};

exports.Prisma.RequestCatalogItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  formSchema: 'formSchema',
  workflowId: 'workflowId'
};

exports.Prisma.RITMScalarFieldEnum = {
  id: 'id',
  reqId: 'reqId',
  catalogItemId: 'catalogItemId',
  status: 'status'
};

exports.Prisma.VipProxyScalarFieldEnum = {
  id: 'id',
  vipId: 'vipId',
  proxyId: 'proxyId',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.VipSlaHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sla: 'sla',
  effectiveAt: 'effectiveAt',
  endedAt: 'endedAt'
};

exports.Prisma.AgentAvailabilityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  queueName: 'queueName',
  isAvailable: 'isAvailable',
  maxCapacity: 'maxCapacity',
  currentLoad: 'currentLoad',
  status: 'status',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt'
};

exports.Prisma.QueueMetricsScalarFieldEnum = {
  id: 'id',
  queueName: 'queueName',
  totalAgents: 'totalAgents',
  availableAgents: 'availableAgents',
  totalTickets: 'totalTickets',
  openTickets: 'openTickets',
  avgResponseTime: 'avgResponseTime',
  avgResolutionTime: 'avgResolutionTime',
  slaBreaches: 'slaBreaches',
  highPriorityTickets: 'highPriorityTickets',
  capacityUtilization: 'capacityUtilization',
  averageWaitTime: 'averageWaitTime',
  thresholdWarning: 'thresholdWarning',
  thresholdCritical: 'thresholdCritical',
  lastCalculated: 'lastCalculated'
};

exports.Prisma.QueueAlertScalarFieldEnum = {
  id: 'id',
  queueName: 'queueName',
  alertType: 'alertType',
  message: 'message',
  isActive: 'isActive',
  alertedAt: 'alertedAt',
  resolvedAt: 'resolvedAt',
  notifiedUsers: 'notifiedUsers'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Role: 'Role',
  Permission: 'Permission',
  UserRole: 'UserRole',
  RolePermission: 'RolePermission',
  Passkey: 'Passkey',
  Log: 'Log',
  Config: 'Config',
  ConfigHistory: 'ConfigHistory',
  ConfigTemplate: 'ConfigTemplate',
  Kiosk: 'Kiosk',
  Feedback: 'Feedback',
  Notification: 'Notification',
  DirectoryIntegration: 'DirectoryIntegration',
  Asset: 'Asset',
  KioskActivation: 'KioskActivation',
  SsoConfiguration: 'SsoConfiguration',
  AdminPin: 'AdminPin',
  KbArticle: 'KbArticle',
  KbArticleVersion: 'KbArticleVersion',
  KbArticleComment: 'KbArticleComment',
  SupportTicket: 'SupportTicket',
  InventoryAsset: 'InventoryAsset',
  AssetStatusLog: 'AssetStatusLog',
  AssetAssignment: 'AssetAssignment',
  AssetTicketHistory: 'AssetTicketHistory',
  AssetWarrantyAlert: 'AssetWarrantyAlert',
  AssetImportBatch: 'AssetImportBatch',
  AssetValidationLog: 'AssetValidationLog',
  KioskAssetRegistry: 'KioskAssetRegistry',
  HelixSyncFailure: 'HelixSyncFailure',
  KioskOrganizationAssignment: 'KioskOrganizationAssignment',
  KioskMetadataLog: 'KioskMetadataLog',
  XpEvent: 'XpEvent',
  Leaderboard: 'Leaderboard',
  ScimMapping: 'ScimMapping',
  ScimLog: 'ScimLog',
  MailroomPackage: 'MailroomPackage',
  DeliveryEvent: 'DeliveryEvent',
  ProxyAuthorization: 'ProxyAuthorization',
  RequestCatalogItem: 'RequestCatalogItem',
  RITM: 'RITM',
  VipProxy: 'VipProxy',
  VipSlaHistory: 'VipSlaHistory',
  AgentAvailability: 'AgentAvailability',
  QueueMetrics: 'QueueMetrics',
  QueueAlert: 'QueueAlert'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
