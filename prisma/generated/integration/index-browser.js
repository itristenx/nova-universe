
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ConnectorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  version: 'version',
  provider: 'provider',
  config: 'config',
  capabilities: 'capabilities',
  status: 'status',
  health: 'health',
  lastHealthCheck: 'lastHealthCheck',
  lastSync: 'lastSync',
  nextSync: 'nextSync',
  syncEnabled: 'syncEnabled',
  syncInterval: 'syncInterval',
  syncStrategy: 'syncStrategy',
  rateLimitPerMin: 'rateLimitPerMin',
  rateLimitPerHour: 'rateLimitPerHour',
  encryptionKey: 'encryptionKey',
  certificate: 'certificate',
  tenantId: 'tenantId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SyncJobScalarFieldEnum = {
  id: 'id',
  connectorId: 'connectorId',
  jobType: 'jobType',
  strategy: 'strategy',
  options: 'options',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  duration: 'duration',
  recordsProcessed: 'recordsProcessed',
  recordsSucceeded: 'recordsSucceeded',
  recordsFailed: 'recordsFailed',
  errorMessage: 'errorMessage',
  errorDetails: 'errorDetails',
  correlationId: 'correlationId',
  triggerType: 'triggerType',
  triggeredBy: 'triggeredBy',
  createdAt: 'createdAt'
};

exports.Prisma.IdentityMappingScalarFieldEnum = {
  id: 'id',
  novaUserId: 'novaUserId',
  email: 'email',
  emailCanonical: 'emailCanonical',
  externalMappings: 'externalMappings',
  confidence: 'confidence',
  lastVerified: 'lastVerified',
  verificationMethod: 'verificationMethod',
  status: 'status',
  conflictResolution: 'conflictResolution',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.TransformationRuleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  sourceConnector: 'sourceConnector',
  sourceField: 'sourceField',
  targetField: 'targetField',
  transformType: 'transformType',
  transformConfig: 'transformConfig',
  validationRules: 'validationRules',
  defaultValue: 'defaultValue',
  enabled: 'enabled',
  priority: 'priority',
  lastApplied: 'lastApplied',
  successCount: 'successCount',
  errorCount: 'errorCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.IntegrationEventScalarFieldEnum = {
  id: 'id',
  eventType: 'eventType',
  eventCategory: 'eventCategory',
  source: 'source',
  data: 'data',
  metadata: 'metadata',
  correlationId: 'correlationId',
  status: 'status',
  processedAt: 'processedAt',
  retryCount: 'retryCount',
  maxRetries: 'maxRetries',
  errorMessage: 'errorMessage',
  errorDetails: 'errorDetails',
  deadLetterQueue: 'deadLetterQueue',
  connectorId: 'connectorId',
  timestamp: 'timestamp',
  expiresAt: 'expiresAt'
};

exports.Prisma.ConnectorMetricScalarFieldEnum = {
  id: 'id',
  connectorId: 'connectorId',
  metricType: 'metricType',
  metricName: 'metricName',
  value: 'value',
  unit: 'unit',
  dimensions: 'dimensions',
  tags: 'tags',
  timestamp: 'timestamp',
  interval: 'interval'
};

exports.Prisma.DataQualityCheckScalarFieldEnum = {
  id: 'id',
  checkName: 'checkName',
  checkType: 'checkType',
  dataSource: 'dataSource',
  field: 'field',
  rules: 'rules',
  status: 'status',
  score: 'score',
  recordsChecked: 'recordsChecked',
  recordsPassed: 'recordsPassed',
  recordsFailed: 'recordsFailed',
  issues: 'issues',
  severity: 'severity',
  executedAt: 'executedAt',
  duration: 'duration'
};

exports.Prisma.IntegrationPolicyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  policyType: 'policyType',
  scope: 'scope',
  rules: 'rules',
  conditions: 'conditions',
  actions: 'actions',
  enabled: 'enabled',
  priority: 'priority',
  enforcementMode: 'enforcementMode',
  violationAction: 'violationAction',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.ConnectorTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  connectorType: 'connectorType',
  configTemplate: 'configTemplate',
  validation: 'validation',
  documentation: 'documentation',
  category: 'category',
  tags: 'tags',
  isOfficial: 'isOfficial',
  version: 'version',
  minNovaVersion: 'minNovaVersion',
  maxNovaVersion: 'maxNovaVersion',
  usageCount: 'usageCount',
  rating: 'rating',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ConnectorType = exports.$Enums.ConnectorType = {
  IDENTITY_PROVIDER: 'IDENTITY_PROVIDER',
  DEVICE_MANAGEMENT: 'DEVICE_MANAGEMENT',
  SECURITY_PLATFORM: 'SECURITY_PLATFORM',
  COLLABORATION: 'COLLABORATION',
  HR_SYSTEM: 'HR_SYSTEM',
  MONITORING: 'MONITORING',
  PROJECT_MANAGEMENT: 'PROJECT_MANAGEMENT',
  TICKETING: 'TICKETING',
  CUSTOM: 'CUSTOM'
};

exports.ConnectorStatus = exports.$Enums.ConnectorStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  ERROR: 'ERROR',
  MAINTENANCE: 'MAINTENANCE',
  DEPRECATED: 'DEPRECATED'
};

exports.HealthStatus = exports.$Enums.HealthStatus = {
  HEALTHY: 'HEALTHY',
  DEGRADED: 'DEGRADED',
  UNHEALTHY: 'UNHEALTHY',
  UNKNOWN: 'UNKNOWN'
};

exports.SyncStrategy = exports.$Enums.SyncStrategy = {
  POLLING: 'POLLING',
  WEBHOOK: 'WEBHOOK',
  EVENT_STREAM: 'EVENT_STREAM',
  HYBRID: 'HYBRID'
};

exports.SyncJobType = exports.$Enums.SyncJobType = {
  FULL_SYNC: 'FULL_SYNC',
  INCREMENTAL_SYNC: 'INCREMENTAL_SYNC',
  DELTA_SYNC: 'DELTA_SYNC',
  VALIDATION_SYNC: 'VALIDATION_SYNC',
  HEALTH_CHECK: 'HEALTH_CHECK'
};

exports.JobStatus = exports.$Enums.JobStatus = {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  TIMEOUT: 'TIMEOUT'
};

exports.TriggerType = exports.$Enums.TriggerType = {
  SCHEDULED: 'SCHEDULED',
  MANUAL: 'MANUAL',
  WEBHOOK: 'WEBHOOK',
  EVENT_DRIVEN: 'EVENT_DRIVEN',
  DEPENDENCY: 'DEPENDENCY'
};

exports.MappingStatus = exports.$Enums.MappingStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  CONFLICTED: 'CONFLICTED',
  PENDING_REVIEW: 'PENDING_REVIEW'
};

exports.TransformationType = exports.$Enums.TransformationType = {
  DIRECT_MAPPING: 'DIRECT_MAPPING',
  FORMAT_CONVERSION: 'FORMAT_CONVERSION',
  DATA_ENRICHMENT: 'DATA_ENRICHMENT',
  AGGREGATION: 'AGGREGATION',
  VALIDATION: 'VALIDATION',
  CUSTOM_FUNCTION: 'CUSTOM_FUNCTION'
};

exports.EventCategory = exports.$Enums.EventCategory = {
  USER_EVENT: 'USER_EVENT',
  DEVICE_EVENT: 'DEVICE_EVENT',
  SECURITY_EVENT: 'SECURITY_EVENT',
  SYSTEM_EVENT: 'SYSTEM_EVENT',
  AUDIT_EVENT: 'AUDIT_EVENT'
};

exports.EventStatus = exports.$Enums.EventStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  RETRY: 'RETRY',
  DEAD_LETTER: 'DEAD_LETTER'
};

exports.MetricType = exports.$Enums.MetricType = {
  COUNTER: 'COUNTER',
  GAUGE: 'GAUGE',
  HISTOGRAM: 'HISTOGRAM',
  SUMMARY: 'SUMMARY'
};

exports.QualityCheckType = exports.$Enums.QualityCheckType = {
  COMPLETENESS: 'COMPLETENESS',
  ACCURACY: 'ACCURACY',
  CONSISTENCY: 'CONSISTENCY',
  VALIDITY: 'VALIDITY',
  UNIQUENESS: 'UNIQUENESS',
  TIMELINESS: 'TIMELINESS'
};

exports.QualityStatus = exports.$Enums.QualityStatus = {
  PENDING: 'PENDING',
  PASSED: 'PASSED',
  FAILED: 'FAILED',
  WARNING: 'WARNING'
};

exports.QualitySeverity = exports.$Enums.QualitySeverity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.PolicyType = exports.$Enums.PolicyType = {
  DATA_GOVERNANCE: 'DATA_GOVERNANCE',
  SECURITY_POLICY: 'SECURITY_POLICY',
  COMPLIANCE_RULE: 'COMPLIANCE_RULE',
  BUSINESS_RULE: 'BUSINESS_RULE',
  TECHNICAL_POLICY: 'TECHNICAL_POLICY'
};

exports.EnforcementMode = exports.$Enums.EnforcementMode = {
  ADVISORY: 'ADVISORY',
  BLOCKING: 'BLOCKING',
  QUARANTINE: 'QUARANTINE'
};

exports.Prisma.ModelName = {
  Connector: 'Connector',
  SyncJob: 'SyncJob',
  IdentityMapping: 'IdentityMapping',
  TransformationRule: 'TransformationRule',
  IntegrationEvent: 'IntegrationEvent',
  ConnectorMetric: 'ConnectorMetric',
  DataQualityCheck: 'DataQualityCheck',
  IntegrationPolicy: 'IntegrationPolicy',
  ConnectorTemplate: 'ConnectorTemplate'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
