// Nova User 360 Schema
// Unified user profile and activity tracking system
// Following industry standards for identity management and data governance

datasource user360_db {
  provider = "postgresql"
  url      = env("USER360_DATABASE_URL")
}

generator user360Client {
  provider      = "prisma-client-js"
  output        = "../generated/user360"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// ============================================================================
// CORE USER IDENTITY MODELS
// ============================================================================

// Primary user profile - single source of truth
model UserProfile {
  id             String  @id @default(uuid())
  helixUid       String  @unique @map("helix_uid") // Master identity key
  email          String  @unique
  emailCanonical String  @unique @map("email_canonical") // Normalized email
  employeeId     String? @unique @map("employee_id")

  // Personal Information
  firstName      String  @map("first_name")
  lastName       String  @map("last_name")
  displayName    String? @map("display_name")
  preferredName  String? @map("preferred_name")
  profilePicture String? @map("profile_picture")
  phoneNumber    String? @map("phone_number")
  mobileNumber   String? @map("mobile_number")

  // Organization Information
  department    String?
  jobTitle      String?       @map("job_title")
  managerId     String?       @map("manager_id")
  manager       UserProfile?  @relation("ManagerReports", fields: [managerId], references: [id])
  directReports UserProfile[] @relation("ManagerReports")
  location      String?
  timezone      String?       @default("UTC")
  startDate     DateTime?     @map("start_date")
  endDate       DateTime?     @map("end_date") // For departed users

  // Status and Access
  status           UserStatus @default(ACTIVE)
  lastLoginAt      DateTime?  @map("last_login_at")
  lastActiveAt     DateTime?  @map("last_active_at")
  isServiceAccount Boolean    @default(false) @map("is_service_account")

  // Security and Compliance
  securityScore Int?      @default(0) @map("security_score") // 0-100
  riskLevel     RiskLevel @default(LOW) @map("risk_level")
  mfaEnabled    Boolean   @default(false) @map("mfa_enabled")

  // Tenant and Permissions
  tenantId    String   @map("tenant_id")
  roles       String[] // Array of role names
  permissions String[] // Array of permission strings

  // Audit and Lifecycle
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  createdBy     String?  @map("created_by")
  lastUpdatedBy String?  @map("last_updated_by")
  dataVersion   Int      @default(1) @map("data_version") // For optimistic locking

  // Relationships
  linkedAccounts  LinkedAccount[]
  assets          AssetAssignment[]
  tickets         UserTicket[]
  activityLogs    ActivityLog[]
  securityEvents  SecurityEvent[]
  trainingRecords TrainingRecord[]

  @@map("user_profiles")
}

// Linked accounts across platforms
model LinkedAccount {
  id     String      @id @default(uuid())
  userId String      @map("user_id")
  user   UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  platform         String // okta, m365, slack, zoom, etc.
  platformUserId   String  @map("platform_user_id")
  platformUsername String? @map("platform_username")
  accountEmail     String? @map("account_email")

  // Account Details
  accountStatus String    @default("active") @map("account_status")
  accountType   String?   @map("account_type") // user, service, guest
  lastSyncAt    DateTime? @map("last_sync_at")

  // Metadata and Configuration
  metadata    Json? // Platform-specific data
  syncEnabled Boolean @default(true) @map("sync_enabled")

  // Audit
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([platform, platformUserId])
  @@map("linked_accounts")
}

// Asset assignments (devices, licenses, etc.)
model AssetAssignment {
  id     String      @id @default(uuid())
  userId String      @map("user_id")
  user   UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Asset Information
  assetId       String    @map("asset_id") // Reference to CMDB
  assetType     AssetType @map("asset_type")
  assetName     String    @map("asset_name")
  assetCategory String?   @map("asset_category")

  // Assignment Details
  assignedAt   DateTime  @default(now()) @map("assigned_at")
  assignedBy   String    @map("assigned_by")
  unassignedAt DateTime? @map("unassigned_at")
  unassignedBy String?   @map("unassigned_by")

  // Status and Compliance
  status           AssetStatus      @default(ASSIGNED)
  complianceStatus ComplianceStatus @default(COMPLIANT) @map("compliance_status")
  lastCheckAt      DateTime?        @map("last_check_at")

  // Metadata
  notes    String?
  metadata Json? // Asset-specific data

  @@map("asset_assignments")
}

// User ticket relationships
model UserTicket {
  id     String      @id @default(uuid())
  userId String      @map("user_id")
  user   UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  ticketId     String             @map("ticket_id") // Reference to ticketing system
  ticketNumber String             @map("ticket_number")
  relationship TicketRelationship // requester, assignee, watcher, etc.

  // Ticket Summary (cached for performance)
  title    String
  status   String
  priority String
  category String?

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, ticketId, relationship])
  @@map("user_tickets")
}

// Activity and audit logs
model ActivityLog {
  id     String      @id @default(uuid())
  userId String      @map("user_id")
  user   UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Activity Details
  activity  String // login, logout, access_resource, etc.
  source    String // system that generated the event
  ipAddress String? @map("ip_address")
  userAgent String? @map("user_agent")
  location  String? // Geolocation if available

  // Event Data
  details   Json? // Activity-specific details
  outcome   ActivityOutcome @default(SUCCESS)
  riskScore Int?            @default(0) @map("risk_score") // 0-100

  // Context
  sessionId     String? @map("session_id")
  correlationId String? @map("correlation_id")

  // Audit
  timestamp     DateTime  @default(now())
  retentionDate DateTime? @map("retention_date") // For data governance

  @@index([userId, timestamp])
  @@index([activity, timestamp])
  @@map("activity_logs")
}

// Security events and incidents
model SecurityEvent {
  id     String      @id @default(uuid())
  userId String      @map("user_id")
  user   UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Event Classification
  eventType String        @map("event_type") // failed_login, suspicious_access, etc.
  severity  EventSeverity @default(LOW)
  category  String // authentication, authorization, etc.

  // Event Details
  description String
  source      String // Source system/service
  ipAddress   String? @map("ip_address")
  location    String?

  // Response and Resolution
  status     EventStatus @default(OPEN)
  assignedTo String?     @map("assigned_to")
  resolvedAt DateTime?   @map("resolved_at")
  resolution String?

  // Metadata
  metadata Json? // Event-specific data

  // Audit
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId, eventType, createdAt])
  @@map("security_events")
}

// Training and compliance records
model TrainingRecord {
  id     String      @id @default(uuid())
  userId String      @map("user_id")
  user   UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Training Details
  courseId       String  @map("course_id")
  courseName     String  @map("course_name")
  courseCategory String? @map("course_category")
  provider       String?

  // Completion Status
  status      TrainingStatus @default(NOT_STARTED) @map("training_status")
  startedAt   DateTime?      @map("started_at")
  completedAt DateTime?      @map("completed_at")
  expiresAt   DateTime?      @map("expires_at")
  score       Int? // Percentage score if applicable

  // Requirements
  isRequired Boolean   @default(false) @map("is_required")
  dueDate    DateTime? @map("due_date")

  // Metadata
  metadata Json? // Course-specific data

  // Audit
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, courseId])
  @@map("training_records")
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
  DEPARTED
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AssetType {
  DEVICE
  SOFTWARE_LICENSE
  CERTIFICATE
  ACCESS_CARD
  MOBILE_DEVICE
  LAPTOP
  DESKTOP
  SERVER
  OTHER
}

enum AssetStatus {
  ASSIGNED
  UNASSIGNED
  PENDING_RETURN
  RETURNED
  LOST
  STOLEN
  DAMAGED
}

enum ComplianceStatus {
  COMPLIANT
  NON_COMPLIANT
  PENDING_REVIEW
  EXEMPT
  UNKNOWN
}

enum TicketRelationship {
  REQUESTER
  ASSIGNEE
  WATCHER
  APPROVER
  RESOLVER
}

enum ActivityOutcome {
  SUCCESS
  FAILURE
  BLOCKED
  WARNING
}

enum EventSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum EventStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  FALSE_POSITIVE
}

enum TrainingStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
  EXPIRED
  WAIVED
}
