/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, '__esModule', { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip,
} = require('./runtime/index-browser.js');

const Prisma = {};

exports.Prisma = Prisma;
exports.$Enums = {};

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: '6.13.0',
  engine: '361e86d0ea4987e9f53a565309b3eed797a6bcbd',
};

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.validator = Public.validator;

/**
 * Extensions
 */
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull,
};

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
});

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  helixUid: 'helixUid',
  email: 'email',
  emailCanonical: 'emailCanonical',
  employeeId: 'employeeId',
  firstName: 'firstName',
  lastName: 'lastName',
  displayName: 'displayName',
  preferredName: 'preferredName',
  profilePicture: 'profilePicture',
  phoneNumber: 'phoneNumber',
  mobileNumber: 'mobileNumber',
  department: 'department',
  jobTitle: 'jobTitle',
  managerId: 'managerId',
  location: 'location',
  timezone: 'timezone',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  lastLoginAt: 'lastLoginAt',
  lastActiveAt: 'lastActiveAt',
  isServiceAccount: 'isServiceAccount',
  securityScore: 'securityScore',
  riskLevel: 'riskLevel',
  mfaEnabled: 'mfaEnabled',
  tenantId: 'tenantId',
  roles: 'roles',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  lastUpdatedBy: 'lastUpdatedBy',
  dataVersion: 'dataVersion',
};

exports.Prisma.LinkedAccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  platform: 'platform',
  platformUserId: 'platformUserId',
  platformUsername: 'platformUsername',
  accountEmail: 'accountEmail',
  accountStatus: 'accountStatus',
  accountType: 'accountType',
  lastSyncAt: 'lastSyncAt',
  metadata: 'metadata',
  syncEnabled: 'syncEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.AssetAssignmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  assetId: 'assetId',
  assetType: 'assetType',
  assetName: 'assetName',
  assetCategory: 'assetCategory',
  assignedAt: 'assignedAt',
  assignedBy: 'assignedBy',
  unassignedAt: 'unassignedAt',
  unassignedBy: 'unassignedBy',
  status: 'status',
  complianceStatus: 'complianceStatus',
  lastCheckAt: 'lastCheckAt',
  notes: 'notes',
  metadata: 'metadata',
};

exports.Prisma.UserTicketScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  ticketId: 'ticketId',
  ticketNumber: 'ticketNumber',
  relationship: 'relationship',
  title: 'title',
  status: 'status',
  priority: 'priority',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  activity: 'activity',
  source: 'source',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  location: 'location',
  details: 'details',
  outcome: 'outcome',
  riskScore: 'riskScore',
  sessionId: 'sessionId',
  correlationId: 'correlationId',
  timestamp: 'timestamp',
  retentionDate: 'retentionDate',
};

exports.Prisma.SecurityEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventType: 'eventType',
  severity: 'severity',
  category: 'category',
  description: 'description',
  source: 'source',
  ipAddress: 'ipAddress',
  location: 'location',
  status: 'status',
  assignedTo: 'assignedTo',
  resolvedAt: 'resolvedAt',
  resolution: 'resolution',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.TrainingRecordScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  courseName: 'courseName',
  courseCategory: 'courseCategory',
  provider: 'provider',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  expiresAt: 'expiresAt',
  score: 'score',
  isRequired: 'isRequired',
  dueDate: 'dueDate',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc',
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive',
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last',
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull,
};
exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  PENDING: 'PENDING',
  DEPARTED: 'DEPARTED',
};

exports.RiskLevel = exports.$Enums.RiskLevel = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL',
};

exports.AssetType = exports.$Enums.AssetType = {
  DEVICE: 'DEVICE',
  SOFTWARE_LICENSE: 'SOFTWARE_LICENSE',
  CERTIFICATE: 'CERTIFICATE',
  ACCESS_CARD: 'ACCESS_CARD',
  MOBILE_DEVICE: 'MOBILE_DEVICE',
  LAPTOP: 'LAPTOP',
  DESKTOP: 'DESKTOP',
  SERVER: 'SERVER',
  OTHER: 'OTHER',
};

exports.AssetStatus = exports.$Enums.AssetStatus = {
  ASSIGNED: 'ASSIGNED',
  UNASSIGNED: 'UNASSIGNED',
  PENDING_RETURN: 'PENDING_RETURN',
  RETURNED: 'RETURNED',
  LOST: 'LOST',
  STOLEN: 'STOLEN',
  DAMAGED: 'DAMAGED',
};

exports.ComplianceStatus = exports.$Enums.ComplianceStatus = {
  COMPLIANT: 'COMPLIANT',
  NON_COMPLIANT: 'NON_COMPLIANT',
  PENDING_REVIEW: 'PENDING_REVIEW',
  EXEMPT: 'EXEMPT',
  UNKNOWN: 'UNKNOWN',
};

exports.TicketRelationship = exports.$Enums.TicketRelationship = {
  REQUESTER: 'REQUESTER',
  ASSIGNEE: 'ASSIGNEE',
  WATCHER: 'WATCHER',
  APPROVER: 'APPROVER',
  RESOLVER: 'RESOLVER',
};

exports.ActivityOutcome = exports.$Enums.ActivityOutcome = {
  SUCCESS: 'SUCCESS',
  FAILURE: 'FAILURE',
  BLOCKED: 'BLOCKED',
  WARNING: 'WARNING',
};

exports.EventSeverity = exports.$Enums.EventSeverity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL',
};

exports.EventStatus = exports.$Enums.EventStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED',
  FALSE_POSITIVE: 'FALSE_POSITIVE',
};

exports.TrainingStatus = exports.$Enums.TrainingStatus = {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  EXPIRED: 'EXPIRED',
  WAIVED: 'WAIVED',
};

exports.Prisma.ModelName = {
  UserProfile: 'UserProfile',
  LinkedAccount: 'LinkedAccount',
  AssetAssignment: 'AssetAssignment',
  UserTicket: 'UserTicket',
  ActivityLog: 'ActivityLog',
  SecurityEvent: 'SecurityEvent',
  TrainingRecord: 'TrainingRecord',
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message;
        const runtime = getRuntime();
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message =
            'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' +
            runtime.prettyName +
            '`).';
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`;

        throw new Error(message);
      },
    });
  }
}

exports.PrismaClient = PrismaClient;

Object.assign(exports, Prisma);
