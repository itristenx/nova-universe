
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ConfigurationItemScalarFieldEnum = {
  id: 'id',
  ciId: 'ciId',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  ciType: 'ciType',
  ciSubType: 'ciSubType',
  ciStatus: 'ciStatus',
  operationalStatus: 'operationalStatus',
  environment: 'environment',
  criticality: 'criticality',
  businessService: 'businessService',
  owner: 'owner',
  technicalOwner: 'technicalOwner',
  supportGroup: 'supportGroup',
  location: 'location',
  site: 'site',
  building: 'building',
  floor: 'floor',
  room: 'room',
  rack: 'rack',
  rackPosition: 'rackPosition',
  department: 'department',
  costCenter: 'costCenter',
  installDate: 'installDate',
  firstDiscoveredDate: 'firstDiscoveredDate',
  lastDiscoveredDate: 'lastDiscoveredDate',
  warrantyExpiryDate: 'warrantyExpiryDate',
  maintenanceExpiryDate: 'maintenanceExpiryDate',
  retirementDate: 'retirementDate',
  discoverySource: 'discoverySource',
  isDiscovered: 'isDiscovered',
  lastScanDate: 'lastScanDate',
  purchasePrice: 'purchasePrice',
  currentValue: 'currentValue',
  vendor: 'vendor',
  manufacturer: 'manufacturer',
  model: 'model',
  serialNumber: 'serialNumber',
  assetTag: 'assetTag',
  customFields: 'customFields',
  attributes: 'attributes',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.CiTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  category: 'category',
  icon: 'icon',
  color: 'color',
  parentTypeId: 'parentTypeId',
  isAbstract: 'isAbstract',
  isActive: 'isActive',
  attributeSchema: 'attributeSchema',
  validationRules: 'validationRules',
  defaultStatus: 'defaultStatus',
  allowedStatuses: 'allowedStatuses',
  discoveryEnabled: 'discoveryEnabled',
  discoveryRules: 'discoveryRules',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CiRelationshipTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  isDirectional: 'isDirectional',
  category: 'category',
  sourceCiTypeId: 'sourceCiTypeId',
  targetCiTypeId: 'targetCiTypeId',
  allowMultiple: 'allowMultiple',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CiRelationshipScalarFieldEnum = {
  id: 'id',
  sourceCiId: 'sourceCiId',
  targetCiId: 'targetCiId',
  relationshipTypeId: 'relationshipTypeId',
  strength: 'strength',
  criticality: 'criticality',
  description: 'description',
  attributes: 'attributes',
  isActive: 'isActive',
  validFrom: 'validFrom',
  validTo: 'validTo',
  discoveredDate: 'discoveredDate',
  isDiscovered: 'isDiscovered',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.HardwareCiScalarFieldEnum = {
  ciId: 'ciId',
  processorType: 'processorType',
  processorSpeed: 'processorSpeed',
  coreCount: 'coreCount',
  memorySize: 'memorySize',
  storageSize: 'storageSize',
  storageType: 'storageType',
  macAddress: 'macAddress',
  ipAddress: 'ipAddress',
  portCount: 'portCount',
  formFactor: 'formFactor',
  dimensions: 'dimensions',
  weight: 'weight',
  powerRequirements: 'powerRequirements'
};

exports.Prisma.SoftwareCiScalarFieldEnum = {
  ciId: 'ciId',
  version: 'version',
  edition: 'edition',
  architecture: 'architecture',
  licenseType: 'licenseType',
  licenseKey: 'licenseKey',
  licenseCount: 'licenseCount',
  installPath: 'installPath',
  installDate: 'installDate',
  installedBy: 'installedBy',
  isLatestVersion: 'isLatestVersion',
  patchLevel: 'patchLevel',
  supportEndDate: 'supportEndDate'
};

exports.Prisma.ApplicationCiScalarFieldEnum = {
  ciId: 'ciId',
  applicationUrl: 'applicationUrl',
  applicationPort: 'applicationPort',
  applicationProtocol: 'applicationProtocol',
  businessFunction: 'businessFunction',
  userCount: 'userCount',
  dataClassification: 'dataClassification',
  programmingLanguage: 'programmingLanguage',
  framework: 'framework',
  databaseType: 'databaseType',
  slaTarget: 'slaTarget',
  availabilityTarget: 'availabilityTarget'
};

exports.Prisma.NetworkCiScalarFieldEnum = {
  ciId: 'ciId',
  ipAddress: 'ipAddress',
  subnetMask: 'subnetMask',
  gateway: 'gateway',
  vlanId: 'vlanId',
  portConfiguration: 'portConfiguration',
  routingTable: 'routingTable',
  firewallRules: 'firewallRules'
};

exports.Prisma.ServiceCiScalarFieldEnum = {
  ciId: 'ciId',
  serviceType: 'serviceType',
  serviceLevel: 'serviceLevel',
  businessOwner: 'businessOwner',
  slaDocument: 'slaDocument',
  availabilityTarget: 'availabilityTarget',
  performanceTarget: 'performanceTarget',
  serviceHours: 'serviceHours',
  maintenanceWindow: 'maintenanceWindow'
};

exports.Prisma.DatabaseCiScalarFieldEnum = {
  ciId: 'ciId',
  databaseType: 'databaseType',
  databaseVersion: 'databaseVersion',
  databaseSize: 'databaseSize',
  connectionString: 'connectionString',
  port: 'port',
  schemaCount: 'schemaCount',
  backupSchedule: 'backupSchedule',
  lastBackupDate: 'lastBackupDate'
};

exports.Prisma.VirtualCiScalarFieldEnum = {
  ciId: 'ciId',
  hypervisorType: 'hypervisorType',
  hostCiId: 'hostCiId',
  allocatedCpu: 'allocatedCpu',
  allocatedMemory: 'allocatedMemory',
  allocatedStorage: 'allocatedStorage',
  virtualNetworks: 'virtualNetworks'
};

exports.Prisma.FacilityCiScalarFieldEnum = {
  ciId: 'ciId',
  facilityType: 'facilityType',
  address: 'address',
  coordinates: 'coordinates',
  squareFootage: 'squareFootage',
  capacity: 'capacity',
  powerCapacity: 'powerCapacity',
  coolingCapacity: 'coolingCapacity'
};

exports.Prisma.BusinessServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  businessOwner: 'businessOwner',
  technicalOwner: 'technicalOwner',
  criticality: 'criticality',
  availabilityTarget: 'availabilityTarget',
  performanceTarget: 'performanceTarget',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CiBusinessServiceScalarFieldEnum = {
  ciId: 'ciId',
  businessServiceId: 'businessServiceId',
  relationshipType: 'relationshipType',
  criticality: 'criticality',
  createdAt: 'createdAt'
};

exports.Prisma.CiIncidentScalarFieldEnum = {
  ciId: 'ciId',
  incidentId: 'incidentId',
  relationshipType: 'relationshipType',
  createdAt: 'createdAt'
};

exports.Prisma.CiChangeScalarFieldEnum = {
  ciId: 'ciId',
  changeId: 'changeId',
  relationshipType: 'relationshipType',
  createdAt: 'createdAt'
};

exports.Prisma.DiscoveryScheduleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  cronExpression: 'cronExpression',
  nextRunDate: 'nextRunDate',
  lastRunDate: 'lastRunDate',
  discoveryType: 'discoveryType',
  scopeConfiguration: 'scopeConfiguration',
  credentialIds: 'credentialIds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.DiscoveryRunScalarFieldEnum = {
  id: 'id',
  scheduleId: 'scheduleId',
  status: 'status',
  startTime: 'startTime',
  endTime: 'endTime',
  itemsDiscovered: 'itemsDiscovered',
  itemsUpdated: 'itemsUpdated',
  itemsCreated: 'itemsCreated',
  errors: 'errors'
};

exports.Prisma.DiscoveredItemScalarFieldEnum = {
  id: 'id',
  runId: 'runId',
  ciId: 'ciId',
  discoveredData: 'discoveredData',
  fingerprint: 'fingerprint',
  status: 'status',
  processingNotes: 'processingNotes',
  discoveredAt: 'discoveredAt',
  processedAt: 'processedAt'
};

exports.Prisma.CmdbHealthScalarFieldEnum = {
  id: 'id',
  metricDate: 'metricDate',
  totalCis: 'totalCis',
  activeCis: 'activeCis',
  staleCis: 'staleCis',
  orphanedCis: 'orphanedCis',
  totalRelationships: 'totalRelationships',
  discoveredRelationships: 'discoveredRelationships',
  manualRelationships: 'manualRelationships',
  discoveredCis: 'discoveredCis',
  manualCis: 'manualCis',
  completenessScore: 'completenessScore',
  accuracyScore: 'accuracyScore',
  createdAt: 'createdAt'
};

exports.Prisma.CiAuditLogScalarFieldEnum = {
  id: 'id',
  ciId: 'ciId',
  operation: 'operation',
  fieldName: 'fieldName',
  oldValue: 'oldValue',
  newValue: 'newValue',
  changedBy: 'changedBy',
  changeReason: 'changeReason',
  changeTicket: 'changeTicket',
  timestamp: 'timestamp'
};

exports.Prisma.SupportGroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  email: 'email',
  phone: 'phone',
  manager: 'manager',
  escalationGroup: 'escalationGroup',
  isActive: 'isActive',
  businessHours: 'businessHours',
  slaTarget: 'slaTarget',
  externalId: 'externalId',
  adGroupDn: 'adGroupDn',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.SupportGroupMemberScalarFieldEnum = {
  id: 'id',
  supportGroupId: 'supportGroupId',
  userId: 'userId',
  role: 'role',
  isPrimary: 'isPrimary',
  isActive: 'isActive',
  startDate: 'startDate',
  endDate: 'endDate',
  assignedAt: 'assignedAt',
  assignedBy: 'assignedBy'
};

exports.Prisma.SupportGroupPermissionScalarFieldEnum = {
  id: 'id',
  supportGroupId: 'supportGroupId',
  resource: 'resource',
  action: 'action',
  scope: 'scope',
  conditions: 'conditions',
  isActive: 'isActive',
  grantedAt: 'grantedAt',
  grantedBy: 'grantedBy'
};

exports.Prisma.CiOwnershipScalarFieldEnum = {
  id: 'id',
  ciId: 'ciId',
  ownershipType: 'ownershipType',
  userId: 'userId',
  supportGroupId: 'supportGroupId',
  isPrimary: 'isPrimary',
  isActive: 'isActive',
  startDate: 'startDate',
  endDate: 'endDate',
  responsibilities: 'responsibilities',
  assignedAt: 'assignedAt',
  assignedBy: 'assignedBy'
};

exports.Prisma.CmdbInventoryMappingScalarFieldEnum = {
  id: 'id',
  ciId: 'ciId',
  inventoryAssetId: 'inventoryAssetId',
  mappingType: 'mappingType',
  relationship: 'relationship',
  syncEnabled: 'syncEnabled',
  lastSyncAt: 'lastSyncAt',
  syncStatus: 'syncStatus',
  syncErrors: 'syncErrors',
  conflictResolution: 'conflictResolution',
  fieldMapping: 'fieldMapping',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  ConfigurationItem: 'ConfigurationItem',
  CiType: 'CiType',
  CiRelationshipType: 'CiRelationshipType',
  CiRelationship: 'CiRelationship',
  HardwareCi: 'HardwareCi',
  SoftwareCi: 'SoftwareCi',
  ApplicationCi: 'ApplicationCi',
  NetworkCi: 'NetworkCi',
  ServiceCi: 'ServiceCi',
  DatabaseCi: 'DatabaseCi',
  VirtualCi: 'VirtualCi',
  FacilityCi: 'FacilityCi',
  BusinessService: 'BusinessService',
  CiBusinessService: 'CiBusinessService',
  CiIncident: 'CiIncident',
  CiChange: 'CiChange',
  DiscoverySchedule: 'DiscoverySchedule',
  DiscoveryRun: 'DiscoveryRun',
  DiscoveredItem: 'DiscoveredItem',
  CmdbHealth: 'CmdbHealth',
  CiAuditLog: 'CiAuditLog',
  SupportGroup: 'SupportGroup',
  SupportGroupMember: 'SupportGroupMember',
  SupportGroupPermission: 'SupportGroupPermission',
  CiOwnership: 'CiOwnership',
  CmdbInventoryMapping: 'CmdbInventoryMapping'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
