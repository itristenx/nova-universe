# AI Control Tower Database Schema
# Enterprise-grade AI/ML/RAG system with custom training, audit trails, and governance

datasource ai_db {
  provider = "postgresql"
  url      = env("AI_DATABASE_URL")
}

generator aiClient {
  provider = "prisma-client-js"
  output   = "../generated/ai"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

# ==============================================================================
# AI CONTROL TOWER CORE MODELS
# ==============================================================================

model AIControlTower {
  id                String              @id @default(uuid())
  name              String
  description       String?
  organizationId    String?
  environment       AIEnvironment       @default(DEVELOPMENT)
  status            TowerStatus         @default(ACTIVE)
  configuration     Json                @default("{}")
  metadata          Json                @default("{}")
  
  # Relationships
  models            AIModel[]
  pipelines         TrainingPipeline[]
  gateways          AIGateway[]
  auditTrails       AIAuditTrail[]
  customDatasets    CustomDataset[]
  
  # Timestamps
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  @@map("ai_control_towers")
}

model AIModel {
  id                String              @id @default(uuid())
  controlTowerId    String              @map("control_tower_id")
  name              String
  description       String?
  type              ModelType
  framework         String              @default("tensorflow")
  version           String              @default("1.0.0")
  status            ModelStatus         @default(TRAINING)
  
  # Model Configuration
  configuration     Json                @default("{}")
  hyperparameters   Json                @default("{}")
  architecture      Json                @default("{}")
  
  # Training Information
  trainingConfig    Json?               @map("training_config")
  trainingMetrics   Json?               @map("training_metrics")
  validationMetrics Json?               @map("validation_metrics")
  
  # Model Assets
  modelPath         String?             @map("model_path")
  weightsPath       String?             @map("weights_path")
  configPath        String?             @map("config_path")
  
  # Performance Metrics
  accuracy          Float?
  precision         Float?
  recall            Float?
  f1Score           Float?              @map("f1_score")
  loss              Float?
  
  # Deployment Information
  isDeployed        Boolean             @default(false) @map("is_deployed")
  deploymentUrl     String?             @map("deployment_url")
  deploymentConfig  Json?               @map("deployment_config")
  
  # Audit and Compliance
  approvalStatus    ApprovalStatus      @default(PENDING) @map("approval_status")
  approvedBy        String?             @map("approved_by")
  approvedAt        DateTime?           @map("approved_at")
  
  # Relationships
  controlTower      AIControlTower      @relation(fields: [controlTowerId], references: [id], onDelete: Cascade)
  trainingJobs      TrainingJob[]
  versions          ModelVersion[]
  customTrainingSets CustomTrainingSet[]
  ragDocuments      RAGDocument[]
  auditTrails       AIAuditTrail[]
  
  # Timestamps
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  @@map("ai_models")
  @@index([controlTowerId])
  @@index([type])
  @@index([status])
  @@index([isDeployed])
}

model ModelVersion {
  id                String              @id @default(uuid())
  modelId           String              @map("model_id")
  version           String
  description       String?
  changelog         String?
  
  # Version Assets
  modelPath         String              @map("model_path")
  weightsPath       String?             @map("weights_path")
  configPath        String?             @map("config_path")
  
  # Performance Metrics
  metrics           Json                @default("{}")
  benchmarkResults  Json?               @map("benchmark_results")
  
  # Version Management
  isActive          Boolean             @default(false) @map("is_active")
  parentVersionId   String?             @map("parent_version_id")
  
  # Relationships
  model             AIModel             @relation(fields: [modelId], references: [id], onDelete: Cascade)
  parentVersion     ModelVersion?       @relation("ModelVersionHistory", fields: [parentVersionId], references: [id])
  childVersions     ModelVersion[]      @relation("ModelVersionHistory")
  
  # Timestamps
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  @@map("model_versions")
  @@unique([modelId, version])
  @@index([modelId])
  @@index([isActive])
}

# ==============================================================================
# TRAINING PIPELINE MODELS
# ==============================================================================

model TrainingPipeline {
  id                String              @id @default(uuid())
  controlTowerId    String              @map("control_tower_id")
  name              String
  description       String?
  
  # Pipeline Configuration
  configuration     Json                @default("{}")
  schedule          String?             # Cron expression
  isActive          Boolean             @default(true) @map("is_active")
  
  # Pipeline Stages
  stages            Json                @default("[]") # Array of pipeline stages
  
  # Relationships
  controlTower      AIControlTower      @relation(fields: [controlTowerId], references: [id], onDelete: Cascade)
  jobs              TrainingJob[]
  
  # Timestamps
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  @@map("training_pipelines")
  @@index([controlTowerId])
  @@index([isActive])
}

model TrainingJob {
  id                String              @id @default(uuid())
  pipelineId        String?             @map("pipeline_id")
  modelId           String              @map("model_id")
  
  # Job Information
  name              String
  description       String?
  jobType           TrainingJobType     @map("job_type") @default(TRAINING)
  status            JobStatus           @default(QUEUED)
  
  # Training Configuration
  trainingConfig    Json                @map("training_config")
  datasetConfig     Json                @map("dataset_config")
  hyperparameters   Json                @default("{}")
  
  # Job Progress
  progress          Float               @default(0.0)
  currentEpoch      Int?                @map("current_epoch")
  totalEpochs       Int?                @map("total_epochs")
  
  # Job Results
  finalMetrics      Json?               @map("final_metrics")
  artifacts         Json?               # Paths to generated artifacts
  logs              String?             # Training logs
  
  # Job Timing
  startedAt         DateTime?           @map("started_at")
  completedAt       DateTime?           @map("completed_at")
  duration          Int?                # Duration in seconds
  
  # Error Handling
  errorMessage      String?             @map("error_message")
  retryCount        Int                 @default(0) @map("retry_count")
  maxRetries        Int                 @default(3) @map("max_retries")
  
  # Relationships
  pipeline          TrainingPipeline?   @relation(fields: [pipelineId], references: [id], onDelete: SetNull)
  model             AIModel             @relation(fields: [modelId], references: [id], onDelete: Cascade)
  
  # Timestamps
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  @@map("training_jobs")
  @@index([modelId])
  @@index([pipelineId])
  @@index([status])
  @@index([jobType])
}

# ==============================================================================
# CUSTOM TRAINING AND DATASETS
# ==============================================================================

model CustomDataset {
  id                String              @id @default(uuid())
  controlTowerId    String              @map("control_tower_id")
  name              String
  description       String?
  datasetType       DatasetType
  
  # Dataset Configuration
  schema            Json                @default("{}")
  metadata          Json                @default("{}")
  tags              String[]            @default([])
  
  # Dataset Statistics
  totalSamples      Int                 @default(0) @map("total_samples")
  totalSize         BigInt              @default(0) @map("total_size") # Size in bytes
  
  # Data Quality Metrics
  qualityScore      Float?              @map("quality_score")
  completeness      Float?
  consistency       Float?
  accuracy          Float?
  
  # Storage Information
  storagePath       String              @map("storage_path")
  storageFormat     String              @map("storage_format") @default("parquet")
  compressionType   String?             @map("compression_type")
  
  # Access Control
  isPublic          Boolean             @default(false) @map("is_public")
  accessPolicy      Json?               @map("access_policy")
  
  # Relationships
  controlTower      AIControlTower      @relation(fields: [controlTowerId], references: [id], onDelete: Cascade)
  trainingSets      CustomTrainingSet[]
  
  # Timestamps
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  @@map("custom_datasets")
  @@index([controlTowerId])
  @@index([datasetType])
  @@index([isPublic])
}

model CustomTrainingSet {
  id                String              @id @default(uuid())
  modelId           String              @map("model_id")
  datasetId         String              @map("dataset_id")
  
  # Training Set Configuration
  name              String
  description       String?
  trainingConfig    Json                @map("training_config")
  
  # Data Split Configuration
  trainingSplit     Float               @default(0.8) @map("training_split")
  validationSplit   Float               @default(0.1) @map("validation_split")
  testSplit         Float               @default(0.1) @map("test_split")
  
  # Training Results
  trainingMetrics   Json?               @map("training_metrics")
  validationMetrics Json?               @map("validation_metrics")
  testMetrics       Json?               @map("test_metrics")
  
  # Audit Information
  createdBy         String              @map("created_by")
  approvedBy        String?             @map("approved_by")
  approvedAt        DateTime?           @map("approved_at")
  
  # Relationships
  model             AIModel             @relation(fields: [modelId], references: [id], onDelete: Cascade)
  dataset           CustomDataset       @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  
  # Timestamps
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  @@map("custom_training_sets")
  @@unique([modelId, datasetId])
  @@index([modelId])
  @@index([datasetId])
}

# ==============================================================================
# RAG (RETRIEVAL-AUGMENTED GENERATION) MODELS
# ==============================================================================

model RAGSystem {
  id                String              @id @default(uuid())
  name              String
  description       String?
  
  # RAG Configuration
  embeddingModel    String              @map("embedding_model")
  vectorDimensions  Int                 @map("vector_dimensions")
  chunkSize         Int                 @default(1000) @map("chunk_size")
  chunkOverlap      Int                 @default(200) @map("chunk_overlap")
  
  # Retrieval Configuration
  retrievalStrategy String              @default("semantic") @map("retrieval_strategy")
  maxRetrievalDocs  Int                 @default(5) @map("max_retrieval_docs")
  similarityThreshold Float             @default(0.7) @map("similarity_threshold")
  
  # Generation Configuration
  generativeModel   String              @map("generative_model")
  maxTokens         Int                 @default(2048) @map("max_tokens")
  temperature       Float               @default(0.7)
  
  # System Prompts
  systemPrompt      String?             @map("system_prompt")
  contextPrompt     String?             @map("context_prompt")
  
  # Performance Metrics
  avgResponseTime   Float?              @map("avg_response_time")
  avgRelevanceScore Float?              @map("avg_relevance_score")
  totalQueries      Int                 @default(0) @map("total_queries")
  
  # Relationships
  documents         RAGDocument[]
  queries           RAGQuery[]
  
  # Timestamps
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  @@map("rag_systems")
}

model RAGDocument {
  id                String              @id @default(uuid())
  ragSystemId       String?             @map("rag_system_id")
  modelId           String?             @map("model_id")
  
  # Document Information
  title             String
  content           String              @db.Text
  contentType       String              @default("text/plain") @map("content_type")
  source            String?
  url               String?
  
  # Document Processing
  processed         Boolean             @default(false)
  chunks            Json?               # Processed chunks with embeddings
  embedding         Json?               # Document-level embedding
  
  # Document Metadata
  tags              String[]            @default([])
  category          String?
  language          String              @default("en")
  
  # Quality Metrics
  qualityScore      Float?              @map("quality_score")
  readabilityScore  Float?              @map("readability_score")
  
  # Relationships
  ragSystem         RAGSystem?          @relation(fields: [ragSystemId], references: [id], onDelete: SetNull)
  model             AIModel?            @relation(fields: [modelId], references: [id], onDelete: SetNull)
  
  # Timestamps
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  @@map("rag_documents")
  @@index([ragSystemId])
  @@index([modelId])
  @@index([processed])
  @@index([category])
}

model RAGQuery {
  id                String              @id @default(uuid())
  ragSystemId       String              @map("rag_system_id")
  
  # Query Information
  query             String              @db.Text
  queryEmbedding    Json?               @map("query_embedding")
  intent            String?
  
  # Query Processing
  retrievedDocs     Json?               @map("retrieved_docs") # IDs and scores of retrieved documents
  generatedResponse String?             @db.Text @map("generated_response")
  
  # Performance Metrics
  retrievalTime     Float?              @map("retrieval_time") # milliseconds
  generationTime    Float?              @map("generation_time") # milliseconds
  totalTime         Float?              @map("total_time") # milliseconds
  
  # Quality Metrics
  relevanceScore    Float?              @map("relevance_score")
  userFeedback      Int?                @map("user_feedback") # 1-5 rating
  
  # User Information
  userId            String?             @map("user_id")
  sessionId         String?             @map("session_id")
  
  # Relationships
  ragSystem         RAGSystem           @relation(fields: [ragSystemId], references: [id], onDelete: Cascade)
  
  # Timestamps
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  @@map("rag_queries")
  @@index([ragSystemId])
  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
}

# ==============================================================================
# AI GATEWAY AND ROUTING
# ==============================================================================

model AIGateway {
  id                String              @id @default(uuid())
  controlTowerId    String              @map("control_tower_id")
  name              String
  description       String?
  
  # Gateway Configuration
  endpoint          String              @unique
  apiVersion        String              @default("v1") @map("api_version")
  isActive          Boolean             @default(true) @map("is_active")
  
  # Routing Configuration
  routingRules      Json                @default("[]") @map("routing_rules")
  loadBalancing     Json                @default("{}") @map("load_balancing")
  failoverConfig    Json                @default("{}") @map("failover_config")
  
  # Security Configuration
  authentication    Json                @default("{}")
  authorization     Json                @default("{}")
  rateLimiting      Json                @default("{}") @map("rate_limiting")
  
  # Guardrails Configuration
  inputValidation   Json                @default("{}") @map("input_validation")
  outputFiltering   Json                @default("{}") @map("output_filtering")
  contentModeration Json                @default("{}") @map("content_moderation")
  
  # Performance Configuration
  caching           Json                @default("{}")
  timeout           Int                 @default(30000) # milliseconds
  retryPolicy       Json                @default("{}") @map("retry_policy")
  
  # Monitoring Configuration
  logging           Json                @default("{}")
  metrics           Json                @default("{}")
  alerting          Json                @default("{}")
  
  # Relationships
  controlTower      AIControlTower      @relation(fields: [controlTowerId], references: [id], onDelete: Cascade)
  providers         AIProvider[]
  requests          AIGatewayRequest[]
  
  # Timestamps
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  @@map("ai_gateways")
  @@index([controlTowerId])
  @@index([isActive])
}

model AIProvider {
  id                String              @id @default(uuid())
  gatewayId         String              @map("gateway_id")
  name              String
  providerType      ProviderType        @map("provider_type")
  
  # Provider Configuration
  endpoint          String
  apiKey            String?             @map("api_key")
  configuration     Json                @default("{}")
  
  # Provider Capabilities
  supportedModels   String[]            @default([]) @map("supported_models")
  capabilities      String[]            @default([])
  
  # Provider Metrics
  isHealthy         Boolean             @default(true) @map("is_healthy")
  lastHealthCheck   DateTime?           @map("last_health_check")
  responseTime      Float?              @map("response_time") # Average response time in ms
  errorRate         Float?              @map("error_rate") # Error rate percentage
  
  # Cost Information
  costPerRequest    Float?              @map("cost_per_request")
  costPerToken      Float?              @map("cost_per_token")
  monthlySpend      Float?              @map("monthly_spend")
  
  # Relationships
  gateway           AIGateway           @relation(fields: [gatewayId], references: [id], onDelete: Cascade)
  
  # Timestamps
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  @@map("ai_providers")
  @@index([gatewayId])
  @@index([providerType])
  @@index([isHealthy])
}

model AIGatewayRequest {
  id                String              @id @default(uuid())
  gatewayId         String              @map("gateway_id")
  
  # Request Information
  method            String
  path              String
  query             String?
  headers           Json?
  body              Json?
  
  # Routing Information
  providerId        String?             @map("provider_id")
  modelId           String?             @map("model_id")
  routingDecision   Json?               @map("routing_decision")
  
  # Response Information
  statusCode        Int?                @map("status_code")
  responseHeaders   Json?               @map("response_headers")
  responseBody      Json?               @map("response_body")
  
  # Performance Metrics
  requestTime       DateTime            @map("request_time")
  responseTime      Float?              @map("response_time") # milliseconds
  tokenCount        Int?                @map("token_count")
  
  # Cost Information
  estimatedCost     Float?              @map("estimated_cost")
  
  # Security Information
  clientId          String?             @map("client_id")
  userId            String?             @map("user_id")
  ipAddress         String?             @map("ip_address")
  
  # Error Information
  errorCode         String?             @map("error_code")
  errorMessage      String?             @map("error_message")
  
  # Relationships
  gateway           AIGateway           @relation(fields: [gatewayId], references: [id], onDelete: Cascade)
  
  # Timestamps
  createdAt         DateTime            @default(now()) @map("created_at")
  
  @@map("ai_gateway_requests")
  @@index([gatewayId])
  @@index([providerId])
  @@index([modelId])
  @@index([requestTime])
  @@index([statusCode])
  @@index([userId])
}

# ==============================================================================
# AUDIT AND COMPLIANCE MODELS
# ==============================================================================

model AIAuditTrail {
  id                String              @id @default(uuid())
  controlTowerId    String?             @map("control_tower_id")
  modelId           String?             @map("model_id")
  
  # Audit Information
  eventType         AuditEventType      @map("event_type")
  action            String
  description       String?
  
  # Entity Information
  entityType        String              @map("entity_type")
  entityId          String              @map("entity_id")
  
  # User Information
  userId            String?             @map("user_id")
  userRole          String?             @map("user_role")
  userAgent         String?             @map("user_agent")
  ipAddress         String?             @map("ip_address")
  
  # Data Changes
  oldValues         Json?               @map("old_values")
  newValues         Json?               @map("new_values")
  changedFields     String[]            @default([]) @map("changed_fields")
  
  # Context Information
  sessionId         String?             @map("session_id")
  requestId         String?             @map("request_id")
  metadata          Json?
  
  # Risk Assessment
  riskLevel         RiskLevel           @default(LOW) @map("risk_level")
  complianceFlags   String[]            @default([]) @map("compliance_flags")
  
  # Relationships
  controlTower      AIControlTower?     @relation(fields: [controlTowerId], references: [id], onDelete: SetNull)
  model             AIModel?            @relation(fields: [modelId], references: [id], onDelete: SetNull)
  
  # Timestamps
  createdAt         DateTime            @default(now()) @map("created_at")
  
  @@map("ai_audit_trails")
  @@index([controlTowerId])
  @@index([modelId])
  @@index([eventType])
  @@index([userId])
  @@index([riskLevel])
  @@index([createdAt])
}

model AIConfiguration {
  id                String              @id @default(uuid())
  name              String              @unique
  category          String
  
  # Configuration Value
  value             Json
  dataType          String              @map("data_type") # string, number, boolean, object, array
  
  # Configuration Metadata
  description       String?
  isSecret          Boolean             @default(false) @map("is_secret")
  isEditable        Boolean             @default(true) @map("is_editable")
  
  # Validation Rules
  validationRules   Json?               @map("validation_rules")
  defaultValue      Json?               @map("default_value")
  
  # Change Management
  lastModifiedBy    String?             @map("last_modified_by")
  changeReason      String?             @map("change_reason")
  version           Int                 @default(1)
  
  # Environment Overrides
  environment       AIEnvironment?
  
  # Timestamps
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  @@map("ai_configurations")
  @@index([category])
  @@index([environment])
}

# ==============================================================================
# ENUMS
# ==============================================================================

enum AIEnvironment {
  DEVELOPMENT
  STAGING
  PRODUCTION
}

enum TowerStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  ERROR
}

enum ModelType {
  CLASSIFICATION
  REGRESSION
  NLP
  COMPUTER_VISION
  TIME_SERIES
  RECOMMENDATION
  REINFORCEMENT_LEARNING
  GENERATIVE
  RAG
  CUSTOM
}

enum ModelStatus {
  DRAFT
  TRAINING
  VALIDATING
  READY
  DEPLOYED
  DEPRECATED
  ERROR
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  REQUIRES_REVIEW
}

enum TrainingJobType {
  TRAINING
  RETRAINING
  FINE_TUNING
  EVALUATION
  HYPERPARAMETER_TUNING
  DATA_PREPARATION
}

enum JobStatus {
  QUEUED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  PAUSED
}

enum DatasetType {
  STRUCTURED
  UNSTRUCTURED
  IMAGE
  AUDIO
  VIDEO
  TEXT
  TIME_SERIES
  MIXED
}

enum ProviderType {
  OPENAI
  ANTHROPIC
  AZURE_OPENAI
  GOOGLE_VERTEX
  AWS_BEDROCK
  HUGGING_FACE
  CUSTOM
  INTERNAL
}

enum AuditEventType {
  MODEL_CREATED
  MODEL_UPDATED
  MODEL_DELETED
  MODEL_TRAINED
  MODEL_DEPLOYED
  MODEL_ACCESSED
  DATASET_CREATED
  DATASET_UPDATED
  DATASET_ACCESSED
  CONFIGURATION_CHANGED
  USER_ACCESS
  SECURITY_EVENT
  COMPLIANCE_CHECK
  SYSTEM_EVENT
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
