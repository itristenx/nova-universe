Here‚Äôs a complete explanation and implementation guide in Markdown format for Beacon / Nova Mobile, the mobile and kiosk experience module within the Nova Universe.

‚∏ª


# üì° Nova Beacon & Nova Mobile
> Unified Kiosk & Mobile Experience for End Users

---

## üî≠ Overview

**Nova Beacon** and **Nova Mobile** are two access modes of the same front-end delivery platform, optimized for:

- **Beacon (Kiosk Mode):** iOS/iPadOS-powered self-service terminal.
- **Nova Mobile:** Native app experience for iPhone and Android (via Flutter or React Native), delivering Nova Orbit features on the go.

Both provide streamlined, secure, and branded access to Nova Orbit capabilities like ticket creation, request catalog browsing, announcements, status updates, and Cosmo interactions.

---

## üß† Purpose

- Provide **zero-friction IT support access** for users in physical locations (via kiosk).
- Offer **on-the-go utility** for mobile-first users.
- Deliver a **custom branded, configurable frontend** with minimal backend logic.

---

## üß± Key Features

| Feature | Beacon (Kiosk) | Mobile App |
|--------|----------------|------------|
| Ticket Creation | ‚úÖ | ‚úÖ |
| Dynamic Branding | ‚úÖ | ‚úÖ |
| Remote Configuration | ‚úÖ | ‚úÖ |
| Offline Cache Support | ‚úÖ | ‚úÖ |
| Cosmo AI Assistant | ‚úÖ | ‚úÖ |
| QR Login / ID Scan | ‚úÖ | ‚úÖ |
| Request Catalog | ‚úÖ | ‚úÖ |
| Status Page / Outages | ‚úÖ | ‚úÖ |
| Announcement Feed | ‚úÖ | ‚úÖ |
| SSO (if enabled) | ‚ùå (anonymous mode) | ‚úÖ |
| Language Localization | ‚úÖ | ‚úÖ |
| Audit Logging | ‚úÖ | ‚úÖ |
| Custom Forms | ‚úÖ | ‚úÖ |

---

## üîê Security & Auth Modes

- **Beacon** operates in **"anonymous kiosk mode"** with optional auto-login using a limited-use service account.
- **Mobile** supports full **Nova ID authentication** via Nova Helix (SSO, SCIM, etc).

---

## üß© Architecture

```plaintext
[ User (Kiosk or Mobile) ]
       |
       v
[ Nova Beacon / Mobile App ]
       |
       v
[ Nova Orbit API (via Platform API v2) ]
       |
       v
[ Core Modules (Pulse, Orbit, Lore, Mailroom, etc) ]

	‚Ä¢	Uses Platform API v2 with tokenized access.
	‚Ä¢	Kiosk config fetched from Nova Core Configuration Service.
	‚Ä¢	Optional push notification integration for mobile.
	‚Ä¢	Offline fallback powered by local cache + background sync.

‚∏ª

üõ†Ô∏è Implementation Plan

1. App Shell
	‚Ä¢	Frameworks:
	‚Ä¢	Kiosk: SwiftUI (iPad-only, locked down)
	‚Ä¢	Mobile: React Native (cross-platform) or SwiftUI + Kotlin
	‚Ä¢	Core Views:
	‚Ä¢	Home screen (logo, announcements, status)
	‚Ä¢	Ticket / request wizard
	‚Ä¢	Cosmo chat interface
	‚Ä¢	Confirmation screens
	‚Ä¢	Settings (hidden for kiosk)

2. Remote Config
	‚Ä¢	Pulled on startup from /core/config endpoint:

{
  "theme": {
    "logo_url": "https://cdn.nova/logo-tenant123.png",
    "primary_color": "#1D1EFF"
  },
  "forms": {
    "default_ticket_form_id": "form_incident_kiosk"
  },
  "cosmo": {
    "enabled": true,
    "preset_prompt": "Hi! How can I help you today?"
  }
}

	‚Ä¢	Cached locally, refreshed every 15 minutes.

3. Ticket Flow
	‚Ä¢	Anonymous or authenticated submission:

POST /orbit/tickets
{
  "type": "incident",
  "submitted_by": "anon_beacon",
  "details": {
    "description": "My monitor is broken.",
    "location": "Floor 3 - Pod B"
  }
}

	‚Ä¢	Supports dynamic forms from /orbit/forms.

4. Cosmo Assistant Integration
	‚Ä¢	App includes in-app chat UI with Cosmo SDK:
	‚Ä¢	Context-aware (kiosk/mobile mode)
	‚Ä¢	Uses preset prompt if user is unauthenticated
	‚Ä¢	API token issued via guest auth

5. Branding & Lockdown (Kiosk only)
	‚Ä¢	Guided access mode
	‚Ä¢	Hide all system gestures
	‚Ä¢	Admin unlock via long-press + passcode
	‚Ä¢	Device identity tracked via Core (device_id, location_code)

‚∏ª

üß™ QA & Testing
	‚Ä¢	Offline test mode
	‚Ä¢	SLA breach / network error simulation
	‚Ä¢	Config fallback validation
	‚Ä¢	UI snapshot testing (branding, layout)
	‚Ä¢	Kiosk watchdog mode (auto-relaunch on crash)

‚∏ª

üß∞ Admin Controls (via Core Admin)

Setting	Description
Logo URL	Tenant-branded image
Theme Color	Primary button & header
Ticket Form ID	Default form to use
Cosmo Enabled	AI toggle
Kiosk Location	Label to track device
Fallback Mode	Enables cached mode when offline
Maintenance Banner	Custom top banner
App Lockout	Prevents user interaction


‚∏ª

üöÄ Deployment

Beacon (Kiosk)
	‚Ä¢	Built via SwiftUI
	‚Ä¢	MDM/DEP support (Supervised iPads)
	‚Ä¢	Configured remotely via Nova Core
	‚Ä¢	Auto-launch on boot
	‚Ä¢	Lockdown: Guided Access or Autonomous Single App Mode

Nova Mobile
	‚Ä¢	iOS: SwiftUI app on App Store / internal deployment
	‚Ä¢	Android: Kotlin/Compose or React Native via Play Store / MDM
	‚Ä¢	Login: Nova Helix SSO or Okta
	‚Ä¢	Secure token storage (Keychain / EncryptedStorage)

‚∏ª

üß≠ Future Enhancements
	‚Ä¢	FaceID/TouchID Login for Nova Mobile
	‚Ä¢	NFC badge check-in for Beacon
	‚Ä¢	Multi-tenant mobile app support
	‚Ä¢	Offline ticket queue for mobile
	‚Ä¢	iBeacon/Bluetooth integration for room awareness
	‚Ä¢	Passcode + QR unlock for Admins
	‚Ä¢	Deep linking from email/push to ticket views

‚∏ª

üßë‚Äçüé® Sample Screens

(To be designed in Figma)

	‚Ä¢	Kiosk Home Screen: Logo, Status, ‚ÄúTap to Start‚Äù
	‚Ä¢	Ticket Flow: Step-by-step form
	‚Ä¢	Cosmo Chat: Bubble-based interaction
	‚Ä¢	Mobile Home: Feed + Quick Actions
	‚Ä¢	Confirmation View: ‚ÄúYour ticket has been submitted!‚Äù

‚∏ª

üßæ API Summary

Endpoint	Description
GET /core/config?kiosk_id=	Fetch kiosk/mobile config
POST /orbit/tickets	Submit ticket
GET /orbit/forms/:id	Get ticket form layout
POST /cosmo/query	Submit chat message
GET /status/summary	Fetch current outage status
GET /announcements	Fetch active announcements


‚∏ª

üìì Developer Notes
	‚Ä¢	Codebase split:
	‚Ä¢	beacon-kiosk-ios/
	‚Ä¢	nova-mobile/
	‚Ä¢	Shared component lib (design system)
	‚Ä¢	Offline-first data layer for ticket queue
	‚Ä¢	Auto-restart on crash (kiosk)
	‚Ä¢	Error telemetry sent via /core/telemetry

‚∏ª

üß© Related Modules
	‚Ä¢	Nova Orbit ‚Äì Shared APIs and ticketing
	‚Ä¢	Nova Core ‚Äì Branding, config, kiosk registry
	‚Ä¢	Nova Helix ‚Äì Auth for mobile
	‚Ä¢	Cosmo SDK ‚Äì AI interface and messaging
	‚Ä¢	Nova Mailroom ‚Äì Backend for email receipts (ticket confirmations)

‚∏ª
