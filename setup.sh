#!/usr/bin/env bash
set -euo pipefail

# Nova Universe - Complete Setup Script
# Simple, one-command setup for the entire platform

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
cd "$PROJECT_ROOT"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Logging functions
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }
log_header() { echo -e "${PURPLE}$1${NC}"; }

# Check if running with correct permissions
check_permissions() {
    if [[ $EUID -eq 0 ]]; then
        log_warning "Running as root. Consider running as a regular user."
    fi
}

# Check system requirements
check_requirements() {
    log_header "üîç Checking System Requirements"
    echo "================================"
    
    # Check Node.js
    if command -v node >/dev/null 2>&1; then
        NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
        if [ "$NODE_VERSION" -ge 18 ]; then
            log_success "Node.js v$(node -v) found"
        else
            log_error "Node.js 18+ required. Found v$(node -v)"
            exit 1
        fi
    else
        log_error "Node.js not found. Please install Node.js 18+"
        exit 1
    fi
    
    # Check npm/pnpm
    if command -v pnpm >/dev/null 2>&1; then
        log_success "pnpm $(pnpm -v) found"
        PACKAGE_MANAGER="pnpm"
    elif command -v npm >/dev/null 2>&1; then
        log_success "npm $(npm -v) found"
        PACKAGE_MANAGER="npm"
    else
        log_error "No package manager found. Please install npm or pnpm"
        exit 1
    fi
    
    # Check Docker
    if command -v docker >/dev/null 2>&1; then
        log_success "Docker $(docker --version | cut -d' ' -f3 | cut -d',' -f1) found"
        HAS_DOCKER=true
    else
        log_warning "Docker not found. Some features may not work"
        HAS_DOCKER=false
    fi
    
    # Check Docker Compose
    if command -v docker-compose >/dev/null 2>&1; then
        log_success "Docker Compose found"
    elif docker compose version >/dev/null 2>&1; then
        log_success "Docker Compose (v2) found"
    else
        log_warning "Docker Compose not found. Some features may not work"
    fi
    
    echo ""
}

# Install dependencies
install_dependencies() {
    log_header "üì¶ Installing Dependencies"
    echo "=========================="
    
    log_info "Installing workspace dependencies..."
    if [ "$PACKAGE_MANAGER" = "pnpm" ]; then
        pnpm install --frozen-lockfile
    else
        npm ci
    fi
    
    log_success "Dependencies installed"
    echo ""
}

# Setup environment files
setup_environment() {
    log_header "‚öôÔ∏è  Setting Up Environment"
    echo "========================="
    
    # Create .env files if they don't exist
    ENV_FILES=(
        "apps/api/.env"
        "apps/core/nova-core/.env"
        "apps/comms/nova-comms/.env"
        ".env.monitoring"
        ".env.ai-fabric"
    )
    
    for env_file in "${ENV_FILES[@]}"; do
        if [ ! -f "$env_file" ]; then
            if [ -f "$env_file.example" ]; then
                log_info "Creating $env_file from example"
                cp "$env_file.example" "$env_file"
            else
                log_info "Creating basic $env_file"
                echo "# Generated by setup script" > "$env_file"
            fi
        else
            log_info "$env_file already exists"
        fi
    done
    
    # Generate secrets if init script exists
    if [ -f "scripts/init-env.sh" ]; then
        log_info "Generating secure environment variables..."
        bash scripts/init-env.sh
    fi
    
    log_success "Environment setup complete"
    echo ""
}

# Setup database
setup_database() {
    log_header "üóÑÔ∏è  Setting Up Database"
    echo "======================="
    
    if [ "$HAS_DOCKER" = true ]; then
        log_info "Starting PostgreSQL container..."
        docker-compose up -d postgres
        
        # Wait for database to be ready
        log_info "Waiting for database to be ready..."
        sleep 10
        
        # Run database migrations
        log_info "Running database setup..."
        if [ -f "scripts/production-db-setup.sh" ]; then
            bash scripts/production-db-setup.sh
        fi
        
        log_success "Database setup complete"
    else
        log_warning "Docker not available. Please setup PostgreSQL manually"
        log_info "Database requirements:"
        log_info "- PostgreSQL 15+"
        log_info "- Create databases: nova_core, nova_auth, nova_audit"
    fi
    
    echo ""
}

# Setup monitoring stack
setup_monitoring() {
    log_header "üìä Setting Up Monitoring Stack"
    echo "=============================="
    
    if [ "$HAS_DOCKER" = true ]; then
        log_info "Starting monitoring services..."
        
        # Start Nova Sentinel (Uptime monitoring)
        if [ -f "docker-compose.monitoring.yml" ]; then
            docker-compose -f docker-compose.monitoring.yml up -d
            log_success "Nova Sentinel started"
        fi
        
        # Start GoAlert if configured
        if [ -f "monitoring/goalert/docker-compose.yml" ]; then
            cd monitoring/goalert
            docker-compose up -d
            cd "$PROJECT_ROOT"
            log_success "GoAlert started"
        fi
        
        log_success "Monitoring stack ready"
    else
        log_warning "Docker not available. Monitoring services not started"
    fi
    
    echo ""
}

# Start services
start_services() {
    log_header "üöÄ Starting Nova Universe Services"
    echo "=================================="
    
    if [ "$HAS_DOCKER" = true ]; then
        log_info "Starting all services..."
        docker-compose up -d
        
        # Wait for services to be ready
        log_info "Waiting for services to start..."
        sleep 15
        
        log_success "All services started!"
        
        # Display service URLs
        echo ""
        log_header "üåê Service URLs"
        echo "==============="
        echo "‚Ä¢ Core Admin UI:     http://localhost:3001"
        echo "‚Ä¢ API Documentation: http://localhost:3000/docs"
        echo "‚Ä¢ Setup Wizard:      http://localhost:3001/setup"
        echo "‚Ä¢ Sentinel Monitor:  http://localhost:3002"
        echo "‚Ä¢ GoAlert Dashboard: http://localhost:8081"
        echo ""
        
        log_header "üîë Default Admin Login"
        echo "======================"
        echo "‚Ä¢ Email:    admin@example.com"
        echo "‚Ä¢ Password: admin"
        echo ""
        log_warning "Change the default password immediately after login!"
        
    else
        log_info "Starting services manually..."
        
        # Start API
        cd apps/api
        npm start &
        API_PID=$!
        cd "$PROJECT_ROOT"
        
        # Start Core UI
        cd apps/core/nova-core
        npm start &
        CORE_PID=$!
        cd "$PROJECT_ROOT"
        
        echo ""
        log_success "Services started manually"
        log_info "API PID: $API_PID, Core UI PID: $CORE_PID"
    fi
    
    echo ""
}

# Health check
run_health_check() {
    log_header "üîç Running Health Check"
    echo "======================="
    
    # Wait a moment for services to fully start
    sleep 5
    
    cd apps/api
    node cli.js health
    cd "$PROJECT_ROOT"
    
    echo ""
}

# Setup completion message
show_completion() {
    log_header "üéâ Setup Complete!"
    echo "=================="
    echo ""
    log_success "Nova Universe is now running!"
    echo ""
    echo "Next steps:"
    echo "1. Visit http://localhost:3001 to access the admin interface"
    echo "2. Run the setup wizard at http://localhost:3001/setup"
    echo "3. Configure Sentinel and GoAlert monitoring"
    echo "4. Change the default admin password"
    echo ""
    echo "Useful commands:"
    echo "‚Ä¢ Health check:    cd apps/api && node cli.js health"
    echo "‚Ä¢ Stop services:   docker-compose down"
    echo "‚Ä¢ View logs:       docker-compose logs -f"
    echo "‚Ä¢ Reset system:    cd apps/api && node cli.js reset"
    echo ""
    log_info "For more help, see: docs/quickstart.md"
    echo ""
}

# Main setup function
main() {
    clear
    log_header "üåü Nova Universe Setup"
    echo "======================"
    echo "Enterprise Help Desk Platform"
    echo ""
    
    check_permissions
    check_requirements
    install_dependencies
    setup_environment
    setup_database
    setup_monitoring
    start_services
    run_health_check
    show_completion
}

# Handle script arguments
case "${1:-}" in
    "--help"|"-h"|"help")
        echo "Nova Universe Setup Script"
        echo ""
        echo "Usage: $0 [option]"
        echo ""
        echo "Options:"
        echo "  --help, -h        Show this help message"
        echo "  --quick           Skip optional components"
        echo "  --no-docker       Setup without Docker"
        echo ""
        echo "Example:"
        echo "  $0                Complete setup"
        echo "  $0 --quick        Quick setup"
        ;;
    "--quick")
        log_info "Running quick setup (skipping optional components)"
        check_requirements
        install_dependencies
        setup_environment
        start_services
        ;;
    "--no-docker")
        log_info "Running setup without Docker"
        HAS_DOCKER=false
        main
        ;;
    *)
        main
        ;;
esac
