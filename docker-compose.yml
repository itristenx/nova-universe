# Docker Compose for Nova Universe Local Development
# Provides PostgreSQL, MongoDB, Elasticsearch, and management tools

services:
  # PostgreSQL Database (Core Data with Prisma)
  postgres:
    image: postgres:15-alpine
    container_name: nova-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nova_universe}
      POSTGRES_USER: ${POSTGRES_USER:-nova_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nova_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init:/docker-entrypoint-initdb.d
      - ./backups/postgres:/backups
    networks:
      - nova-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nova_admin} -d ${POSTGRES_DB:-nova_universe}"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    command: >
      postgres
      -c log_statement=all
      -c log_destination=stderr
      -c log_min_duration_statement=100
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # pgAdmin for PostgreSQL Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: nova-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./scripts/pgadmin-servers.json:/pgladmin4/servers.json:ro
    networks:
      - nova-network
    depends_on:
      postgres:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true

  # MongoDB Database (Logs and Telemetry)
  mongodb:
    image: mongo:7.0
    container_name: nova-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-mongo_secure_pass_2024}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-nova_logs}
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./scripts/mongo-init:/docker-entrypoint-initdb.d
      - ./backups/mongodb:/backups
    networks:
      - nova-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      mongod
      --bind_ip_all
      --logpath=/var/log/mongodb/mongod.log
      --logappend

  # Elasticsearch (Search and Analytics)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: nova-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - cluster.name=nova-cluster
      - node.name=nova-node-1
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "${ELASTIC_PORT:-9200}:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./scripts/elasticsearch-config:/usr/share/elasticsearch/config/scripts
      - ./backups/elasticsearch:/backups
    networks:
      - nova-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    security_opt:
      - no-new-privileges:true

  # Kibana (Elasticsearch Dashboard)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: nova-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD:-changeme}
      - SERVER_NAME=nova-kibana
      - SERVER_HOST=0.0.0.0
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    networks:
      - nova-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true

  # Mongo Express (MongoDB Web Interface)
  mongo-express:
    image: mongo-express:latest
    container_name: nova-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD:-mongo_secure_pass_2024}
      ME_CONFIG_MONGODB_URL: mongodb://admin:${MONGO_ROOT_PASSWORD:-mongo_secure_pass_2024}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGOEXPRESS_USERNAME:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGOEXPRESS_PASSWORD:-admin123}
    ports:
      - "${MONGOEXPRESS_PORT:-8081}:8081"
    networks:
      - nova-network
    depends_on:
      mongodb:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: nova-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis_secure_pass_2024}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - nova-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true

  # Nova API (Main Application)
  # nova-api:
  #   build:
  #     context: ./nova-api
  #     dockerfile: Dockerfile
  #   container_name: nova-api
  #   restart: unless-stopped
  #   environment:
  #     NODE_ENV: development
  #     DATABASE_URL: postgres://nova_admin:${POSTGRES_PASSWORD}@postgres:5432/nova_universe
  #     MONGO_URL: mongodb://admin:mongo_secure_pass_2024@mongodb:27017/nova_logs
  #     # Add any other required environment variables here
  #   ports:
  #     - "3001:3000"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     mongodb:
  #       condition: service_healthy
  #     elasticsearch:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - nova-network

  # Nova Comms (Slack/Messaging Service)
  # nova-comms:
  #   build:
  #     context: ./nova-comms
  #     dockerfile: Dockerfile
  #   container_name: nova-comms
  #   restart: unless-stopped
  #   environment:
  #     NODE_ENV: development
  #     # Add any required environment variables for comms here
  #   ports:
  #     - "3002:3002"
  #   depends_on:
  #     - postgres
  #     - mongodb
  #     - redis
  #   networks:
  #     - nova-network

  # Nova Core (Admin UI)
  # nova-core:
  #   build:
  #     context: ./nova-core
  #     dockerfile: Dockerfile
  #   container_name: nova-core
  #   restart: unless-stopped
  #   environment:
  #     NODE_ENV: development
  #     # Add any required environment variables for UI here
  #   ports:
  #     - "5173:5173"
  #   depends_on:
  #     - nova-api
  #   networks:
  #     - nova-network

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  elasticsearch_data:
    driver: local
  redis_data:
    driver: local

networks:
  nova-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
