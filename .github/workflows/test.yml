name: Test

on:
  push:
    branches: ["main"]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        ports:
          - 5433:5432
        env:
          POSTGRES_DB: nova_test
          POSTGRES_USER: nova_test
          POSTGRES_PASSWORD: test_ci_db
        options: >-
          --health-cmd="pg_isready -U nova_test -d nova_test"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      # App secrets
      SESSION_SECRET: test_ci_session
      JWT_SECRET: test_ci_jwt
      KIOSK_TOKEN: test_ci_kiosk
      SCIM_TOKEN: test_ci_scim
      # DB credentials
      POSTGRES_PASSWORD: test_ci_db
      AUTH_DB_PASSWORD: test_ci_db
      POSTGRES_USER: nova_test
      POSTGRES_DB: nova_test
      POSTGRES_HOST: localhost
      # App config
      CORS_ORIGINS: http://localhost:4101,http://localhost:4102
      DISABLE_AUTH: true
      API_PORT: 3000
      DEBUG_CORS: false
      DISABLE_CLEANUP: true
      # Prisma datasource for generate (point to service port 5433)
      CORE_DATABASE_URL: postgresql://nova_test:test_ci_db@localhost:5433/nova_test
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Ensure Docker is available
        run: docker --version && docker compose version || echo "Docker Compose plugin will be installed by default on ubuntu-latest"
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'
      - run: pnpm install
      - name: Generate Prisma Client
        run: npx prisma generate
      - name: Start test environment (integration)
        shell: bash
        run: |
          chmod +x ./setup-test-env.sh
          ./setup-test-env.sh integration
          echo "Waiting for API container health..."
          for i in {1..120}; do \
            STATUS=$(docker inspect -f '{{.State.Health.Status}}' nova-test-integration-api 2>/dev/null || echo "unknown"); \
            echo "api health: $STATUS"; \
            if [[ "$STATUS" == "healthy" ]]; then break; fi; \
            docker logs --tail 50 nova-test-integration-api || true; \
            sleep 2; \
          done
          echo "Waiting for host port to accept connections..."
          curl --retry 60 --retry-connrefused --retry-delay 1 -fsS http://localhost:4102/health || (docker logs nova-test-integration-api | tail -200; exit 1)
          echo "Checking monitoring health endpoint..."
          curl -fsS http://localhost:4102/api/monitoring/health | jq '.status' || true
      - run: pnpm run test:ci
        env:
          TEST_API_URL: http://localhost:4102

  playwright-smoke:
    name: Playwright Smoke (Orbit)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'
      - run: pnpm install
      - name: Install Playwright Browsers
        working-directory: apps/orbit
        run: npx playwright install --with-deps
      - name: Run Playwright smoke tests
        working-directory: apps/orbit
        run: pnpm run test:e2e -- --reporter=line

  audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm audit --json | tee audit.json || true

  depcheck:
    name: Dependency Check
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'
      - run: pnpm install
      - run: npx depcheck || true
