openapi: 3.0.3
info:
  title: Nova Universe Platform API
  description: |
    Comprehensive API documentation for the Nova Universe IT Service Management platform.

    ## Authentication

    The API uses Bearer token authentication. Include your API key in the Authorization header:
    ```
    Authorization: Bearer your-api-key-here
    ```

    ## Versioning Strategy

    This API follows semantic versioning with URI-based versioning:
    - **v2**: Current stable version with latest features
    - **v1**: Legacy version (deprecated, maintained for backward compatibility)

    Breaking changes will increment the major version. Non-breaking changes (new endpoints, 
    optional parameters) may be added to existing versions.

    ## Rate Limiting

    API requests are rate limited:
    - **Authenticated requests**: 1000 requests per hour
    - **Unauthenticated requests**: 100 requests per hour

    Rate limit headers are included in all responses:
    - `X-RateLimit-Limit`: Request limit per window
    - `X-RateLimit-Remaining`: Requests remaining in current window
    - `X-RateLimit-Reset`: Unix timestamp when the window resets

  version: 2.0.0
  contact:
    name: Nova Universe API Support
    email: api-support@nova-universe.com
    url: https://docs.nova-universe.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://nova-universe.com/terms

servers:
  - url: https://api.nova-universe.com/api/v2
    description: Production API (v2 - Current)
  - url: https://api.nova-universe.com/api/v1
    description: Production API (v1 - Legacy)
  - url: https://staging.api.nova-universe.com/api/v2
    description: Staging API (v2)
  - url: http://localhost:3000/api/v2
    description: Local Development (v2)
  - url: http://localhost:3000/api/v1
    description: Local Development (v1)

security:
  - BearerAuth: []
  - ApiKeyAuth: []

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Tickets
    description: IT support ticket management (Nova Pulse)
  - name: Assets
    description: Asset and inventory management
  - name: Knowledge Base
    description: Knowledge articles and documentation (Nova Lore)
  - name: Users
    description: User management and directory services (Nova Helix)
  - name: SCIM
    description: System for Cross-domain Identity Management
  - name: AI Services
    description: AI-powered features and automation (Nova Synth)
  - name: Monitoring
    description: System monitoring and alerting (Nova Sentinel)
  - name: Configuration
    description: System configuration and settings
  - name: Kiosks
    description: Kiosk management and activation (Nova Beacon)
  - name: Communications
    description: Notification and messaging services (Nova Comms)
  - name: Reports
    description: Analytics and reporting
  - name: Webhooks
    description: Webhook management and event notifications

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User Login
      description: |
        Authenticate a user and return a JWT token. Supports multiple authentication methods:
        - Standard username/password
        - SAML SSO (when configured)
        - Multi-factor authentication
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: User's email address or username
                  example: 'admin@example.com'
                password:
                  type: string
                  format: password
                  description: User's password
                  example: 'securePassword123'
                mfaCode:
                  type: string
                  description: Multi-factor authentication code (if MFA is enabled)
                  example: '123456'
                rememberMe:
                  type: boolean
                  description: Whether to extend session duration
                  default: false
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    description: JWT authentication token
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
                  refreshToken:
                    type: string
                    description: Refresh token for token renewal
                  user:
                    $ref: '#/components/schemas/User'
                  expiresIn:
                    type: integer
                    description: Token expiration time in seconds
                    example: 3600
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh Token
      description: Refresh an expired JWT token using a refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  description: Valid refresh token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    description: New JWT token
                  refreshToken:
                    type: string
                    description: New refresh token
                  expiresIn:
                    type: integer
                    example: 3600
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User Logout
      description: Invalidate current session and JWT token
      operationId: logoutUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Logged out successfully'

  # Ticket Management (Nova Pulse)
  /pulse/tickets:
    get:
      tags:
        - Tickets
      summary: List Tickets
      description: |
        Retrieve a paginated list of tickets with filtering and sorting options.
        Supports advanced filtering by status, priority, assignee, category, and date ranges.
      operationId: listTickets
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of tickets per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
        - name: status
          in: query
          description: Filter by ticket status
          schema:
            type: string
            enum: [open, in_progress, resolved, closed, pending]
        - name: priority
          in: query
          description: Filter by priority level
          schema:
            type: string
            enum: [low, medium, high, critical]
        - name: assignee
          in: query
          description: Filter by assigned user ID
          schema:
            type: string
        - name: category
          in: query
          description: Filter by ticket category
          schema:
            type: string
        - name: search
          in: query
          description: Search in ticket title and description
          schema:
            type: string
        - name: sort
          in: query
          description: Sort field
          schema:
            type: string
            enum: [created_at, updated_at, priority, status]
            default: created_at
        - name: order
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of tickets
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ticket'
                  pagination:
                    $ref: '#/components/schemas/PaginationMeta'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      tags:
        - Tickets
      summary: Create Ticket
      description: Create a new support ticket
      operationId: createTicket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTicketRequest'
      responses:
        '201':
          description: Ticket created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Ticket'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /pulse/tickets/{ticketId}:
    get:
      tags:
        - Tickets
      summary: Get Ticket Details
      description: Retrieve detailed information about a specific ticket
      operationId: getTicket
      parameters:
        - name: ticketId
          in: path
          required: true
          description: Unique ticket identifier
          schema:
            type: string
            example: 'TKT-2024-001'
      responses:
        '200':
          description: Ticket details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/TicketDetail'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    put:
      tags:
        - Tickets
      summary: Update Ticket
      description: Update ticket information and status
      operationId: updateTicket
      parameters:
        - name: ticketId
          in: path
          required: true
          description: Unique ticket identifier
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTicketRequest'
      responses:
        '200':
          description: Ticket updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Ticket'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Knowledge Base (Nova Lore)
  /lore/articles:
    get:
      tags:
        - Knowledge Base
      summary: List Knowledge Articles
      description: Retrieve knowledge base articles with search and filtering
      operationId: listArticles
      parameters:
        - name: search
          in: query
          description: Search query for article content
          schema:
            type: string
        - name: category
          in: query
          description: Filter by article category
          schema:
            type: string
        - name: tags
          in: query
          description: Filter by tags (comma-separated)
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of knowledge articles
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/KnowledgeArticle'
                  pagination:
                    $ref: '#/components/schemas/PaginationMeta'

    post:
      tags:
        - Knowledge Base
      summary: Create Knowledge Article
      description: Create a new knowledge base article
      operationId: createArticle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArticleRequest'
      responses:
        '201':
          description: Article created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/KnowledgeArticle'

  # Asset Management
  /inventory/assets:
    get:
      tags:
        - Assets
      summary: List Assets
      description: Retrieve a list of assets with filtering options
      operationId: listAssets
      parameters:
        - name: type
          in: query
          description: Filter by asset type
          schema:
            type: string
            enum: [hardware, software, network, mobile]
        - name: status
          in: query
          description: Filter by asset status
          schema:
            type: string
            enum: [active, inactive, maintenance, retired]
        - name: assignee
          in: query
          description: Filter by assigned user
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 25
      responses:
        '200':
          description: List of assets
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Asset'
                  pagination:
                    $ref: '#/components/schemas/PaginationMeta'

  # AI Services (Nova Synth)
  /synth/ai/chat:
    post:
      tags:
        - AI Services
      summary: AI Chat Completion
      description: Send a message to the AI assistant for intelligent responses
      operationId: aiChatCompletion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  description: User message
                  example: 'How do I reset my password?'
                context:
                  type: object
                  description: Additional context for the AI
                  properties:
                    ticketId:
                      type: string
                    userId:
                      type: string
                    department:
                      type: string
      responses:
        '200':
          description: AI response generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      response:
                        type: string
                        description: AI-generated response
                      confidence:
                        type: number
                        format: float
                        description: Confidence score (0-1)
                      suggestedActions:
                        type: array
                        items:
                          type: string
                        description: Suggested follow-up actions

  # System Configuration
  /admin/system/configuration:
    get:
      tags:
        - Configuration
      summary: Get System Configuration
      description: Retrieve current system configuration settings
      operationId: getSystemConfig
      security:
        - BearerAuth: []
      responses:
        '200':
          description: System configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemConfiguration'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    put:
      tags:
        - Configuration
      summary: Update System Configuration
      description: Update system configuration settings
      operationId: updateSystemConfig
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemConfiguration'
      responses:
        '200':
          description: Configuration updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/SystemConfiguration'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token authentication
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key authentication

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 'user_123'
        email:
          type: string
          format: email
          example: 'admin@example.com'
        name:
          type: string
          example: 'Admin User'
        role:
          type: string
          enum: [admin, agent, user]
          example: 'admin'
        department:
          type: string
          example: 'IT'
        isActive:
          type: boolean
          example: true
        lastLogin:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Ticket:
      type: object
      properties:
        id:
          type: string
          example: 'TKT-2024-001'
        title:
          type: string
          example: 'Password reset request'
        description:
          type: string
          example: 'User unable to access email account'
        status:
          type: string
          enum: [open, in_progress, resolved, closed, pending]
          example: 'open'
        priority:
          type: string
          enum: [low, medium, high, critical]
          example: 'medium'
        category:
          type: string
          example: 'Account Access'
        assignee:
          $ref: '#/components/schemas/User'
        requester:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        dueDate:
          type: string
          format: date-time
        resolution:
          type: string
          description: Resolution notes
        tags:
          type: array
          items:
            type: string

    TicketDetail:
      allOf:
        - $ref: '#/components/schemas/Ticket'
        - type: object
          properties:
            comments:
              type: array
              items:
                $ref: '#/components/schemas/TicketComment'
            attachments:
              type: array
              items:
                $ref: '#/components/schemas/Attachment'
            history:
              type: array
              items:
                $ref: '#/components/schemas/TicketHistoryEntry'

    TicketComment:
      type: object
      properties:
        id:
          type: string
        content:
          type: string
        author:
          $ref: '#/components/schemas/User'
        isInternal:
          type: boolean
          description: Whether comment is internal or visible to requester
        createdAt:
          type: string
          format: date-time

    TicketHistoryEntry:
      type: object
      properties:
        id:
          type: string
        action:
          type: string
          enum: [created, updated, assigned, resolved, closed, commented]
        description:
          type: string
        user:
          $ref: '#/components/schemas/User'
        timestamp:
          type: string
          format: date-time
        changes:
          type: object
          description: Object containing field changes

    CreateTicketRequest:
      type: object
      required:
        - title
        - description
        - category
      properties:
        title:
          type: string
          maxLength: 255
          example: 'Password reset request'
        description:
          type: string
          example: 'User unable to access email account after password change'
        category:
          type: string
          example: 'Account Access'
        priority:
          type: string
          enum: [low, medium, high, critical]
          default: medium
        assignee:
          type: string
          description: User ID to assign ticket to
        dueDate:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string

    UpdateTicketRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
        description:
          type: string
        status:
          type: string
          enum: [open, in_progress, resolved, closed, pending]
        priority:
          type: string
          enum: [low, medium, high, critical]
        assignee:
          type: string
        resolution:
          type: string
        tags:
          type: array
          items:
            type: string

    KnowledgeArticle:
      type: object
      properties:
        id:
          type: string
          example: 'kb_001'
        title:
          type: string
          example: 'How to Reset Your Password'
        summary:
          type: string
          example: 'Step-by-step guide for password reset'
        content:
          type: string
          description: Full article content in markdown
        category:
          type: string
          example: 'Account Management'
        tags:
          type: array
          items:
            type: string
        author:
          $ref: '#/components/schemas/User'
        isPublished:
          type: boolean
        views:
          type: integer
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateArticleRequest:
      type: object
      required:
        - title
        - content
        - category
      properties:
        title:
          type: string
          maxLength: 255
        summary:
          type: string
          maxLength: 500
        content:
          type: string
        category:
          type: string
        tags:
          type: array
          items:
            type: string
        isPublished:
          type: boolean
          default: false

    Asset:
      type: object
      properties:
        id:
          type: string
          example: 'asset_001'
        name:
          type: string
          example: 'MacBook Pro 2023'
        type:
          type: string
          enum: [hardware, software, network, mobile]
          example: 'hardware'
        status:
          type: string
          enum: [active, inactive, maintenance, retired]
          example: 'active'
        serialNumber:
          type: string
          example: 'MB-2023-001'
        model:
          type: string
          example: 'MacBook Pro 14-inch'
        manufacturer:
          type: string
          example: 'Apple'
        assignee:
          $ref: '#/components/schemas/User'
        location:
          type: string
          example: 'Office Floor 2'
        purchaseDate:
          type: string
          format: date
        warrantyExpiration:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    SystemConfiguration:
      type: object
      properties:
        general:
          type: object
          properties:
            organizationName:
              type: string
            timezone:
              type: string
            language:
              type: string
            dateFormat:
              type: string
        security:
          type: object
          properties:
            sessionTimeout:
              type: integer
            passwordPolicy:
              type: object
              properties:
                minLength:
                  type: integer
                requireNumbers:
                  type: boolean
                requireSymbols:
                  type: boolean
                requireUppercase:
                  type: boolean
            mfaRequired:
              type: boolean
        email:
          type: object
          properties:
            smtpHost:
              type: string
            smtpPort:
              type: integer
            smtpSecure:
              type: boolean
            fromAddress:
              type: string
            fromName:
              type: string
        notifications:
          type: object
          properties:
            enableEmailNotifications:
              type: boolean
            enableSlackNotifications:
              type: boolean
            slackWebhook:
              type: string

    Attachment:
      type: object
      properties:
        id:
          type: string
        filename:
          type: string
        size:
          type: integer
          description: File size in bytes
        mimeType:
          type: string
        url:
          type: string
          description: Download URL
        uploadedBy:
          $ref: '#/components/schemas/User'
        uploadedAt:
          type: string
          format: date-time

    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 25
        total:
          type: integer
          example: 150
        totalPages:
          type: integer
          example: 6
        hasNext:
          type: boolean
          example: true
        hasPrev:
          type: boolean
          example: false

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: 'VALIDATION_ERROR'
            message:
              type: string
              example: 'Invalid input data'
            details:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  message:
                    type: string
            timestamp:
              type: string
              format: date-time
            requestId:
              type: string
              example: 'req_123456'

  responses:
    BadRequestError:
      description: Bad request - Invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: 'BAD_REQUEST'
              message: 'Invalid request parameters'
              timestamp: '2024-01-15T10:30:00Z'
              requestId: 'req_123456'

    UnauthorizedError:
      description: Unauthorized - Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: 'UNAUTHORIZED'
              message: 'Authentication token required'
              timestamp: '2024-01-15T10:30:00Z'
              requestId: 'req_123456'

    ForbiddenError:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: 'FORBIDDEN'
              message: 'Insufficient permissions to access this resource'
              timestamp: '2024-01-15T10:30:00Z'
              requestId: 'req_123456'

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: 'NOT_FOUND'
              message: 'The requested resource was not found'
              timestamp: '2024-01-15T10:30:00Z'
              requestId: 'req_123456'

    ValidationError:
      description: Validation error - Invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: 'VALIDATION_ERROR'
              message: 'Input validation failed'
              details:
                - field: 'email'
                  message: 'Invalid email format'
                - field: 'password'
                  message: 'Password must be at least 8 characters'
              timestamp: '2024-01-15T10:30:00Z'
              requestId: 'req_123456'

    RateLimitError:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          description: Request limit per window
          schema:
            type: integer
            example: 1000
        X-RateLimit-Remaining:
          description: Requests remaining in current window
          schema:
            type: integer
            example: 0
        X-RateLimit-Reset:
          description: Unix timestamp when the window resets
          schema:
            type: integer
            example: 1642248600
        Retry-After:
          description: Seconds to wait before making another request
          schema:
            type: integer
            example: 60
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: 'RATE_LIMIT_EXCEEDED'
              message: 'Rate limit exceeded. Please wait before making another request.'
              timestamp: '2024-01-15T10:30:00Z'
              requestId: 'req_123456'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: 'INTERNAL_SERVER_ERROR'
              message: 'An internal server error occurred'
              timestamp: '2024-01-15T10:30:00Z'
              requestId: 'req_123456'

  examples:
    TicketExample:
      summary: Sample support ticket
      value:
        id: 'TKT-2024-001'
        title: 'Password reset request'
        description: 'User unable to access email account after password change'
        status: 'open'
        priority: 'medium'
        category: 'Account Access'
        assignee:
          id: 'user_456'
          name: 'John Agent'
          email: 'john@example.com'
        requester:
          id: 'user_789'
          name: 'Jane User'
          email: 'jane@example.com'
        createdAt: '2024-01-15T10:30:00Z'
        updatedAt: '2024-01-15T10:30:00Z'
        tags: ['password', 'account', 'urgent']

  headers:
    X-RateLimit-Limit:
      description: Request limit per window
      schema:
        type: integer
    X-RateLimit-Remaining:
      description: Requests remaining in current window
      schema:
        type: integer
    X-RateLimit-Reset:
      description: Unix timestamp when the window resets
      schema:
        type: integer
